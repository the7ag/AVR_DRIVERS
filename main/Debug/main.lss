
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e80  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00001e80  00001f14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000726  0080007c  0080007c  00001f30  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001f30  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001f60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000670  00000000  00000000  00001f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005f1f  00000000  00000000  0000260c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000168b  00000000  00000000  0000852b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003916  00000000  00000000  00009bb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000136c  00000000  00000000  0000d4cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001eb8  00000000  00000000  0000e838  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000593e  00000000  00000000  000106f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000618  00000000  00000000  0001602e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__vector_1>
       8:	0c 94 11 03 	jmp	0x622	; 0x622 <__vector_2>
       c:	0c 94 3a 03 	jmp	0x674	; 0x674 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 ed 03 	jmp	0x7da	; 0x7da <__vector_6>
      1c:	0c 94 8b 06 	jmp	0xd16	; 0xd16 <__vector_7>
      20:	0c 94 c4 03 	jmp	0x788	; 0x788 <__vector_8>
      24:	0c 94 9b 03 	jmp	0x736	; 0x736 <__vector_9>
      28:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 28 04 	jmp	0x850	; 0x850 <__vector_13>
      38:	0c 94 48 04 	jmp	0x890	; 0x890 <__vector_14>
      3c:	0c 94 84 04 	jmp	0x908	; 0x908 <__vector_15>
      40:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e8       	ldi	r30, 0x80	; 128
      68:	fe e1       	ldi	r31, 0x1E	; 30
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	27 e0       	ldi	r18, 0x07	; 7
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3a       	cpi	r26, 0xA2	; 162
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ce 01 	call	0x39c	; 0x39c <main>
      8a:	0c 94 3e 0f 	jmp	0x1e7c	; 0x1e7c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_SendData>:
	LCD_SendInstruction(0x10);
	_delay_ms(2);
	initdone=1;
}
void LCD_SendData(uint8_t Data)
{
      92:	cf 93       	push	r28
      94:	c8 2f       	mov	r28, r24
	//RW LOW
	DIO_SetPinValue(LCD_Control,RS,HIGH);
      96:	41 e0       	ldi	r20, 0x01	; 1
      98:	60 91 81 00 	lds	r22, 0x0081	; 0x800081 <RS>
      9c:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <LCD_Control>
      a0:	0e 94 72 02 	call	0x4e4	; 0x4e4 <DIO_SetPinValue>
	//High Nibble
	DIO_SetPinValue(LCD_Data,D4,ReadBit(Data,4));
      a4:	c4 fb       	bst	r28, 4
      a6:	44 27       	eor	r20, r20
      a8:	40 f9       	bld	r20, 0
      aa:	60 91 7f 00 	lds	r22, 0x007F	; 0x80007f <D4>
      ae:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <LCD_Data>
      b2:	0e 94 72 02 	call	0x4e4	; 0x4e4 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_Data,D5,ReadBit(Data,5));
      b6:	c5 fb       	bst	r28, 5
      b8:	44 27       	eor	r20, r20
      ba:	40 f9       	bld	r20, 0
      bc:	60 91 7e 00 	lds	r22, 0x007E	; 0x80007e <D5>
      c0:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <LCD_Data>
      c4:	0e 94 72 02 	call	0x4e4	; 0x4e4 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_Data,D6,ReadBit(Data,6));
      c8:	c6 fb       	bst	r28, 6
      ca:	44 27       	eor	r20, r20
      cc:	40 f9       	bld	r20, 0
      ce:	60 91 7d 00 	lds	r22, 0x007D	; 0x80007d <D6>
      d2:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <LCD_Data>
      d6:	0e 94 72 02 	call	0x4e4	; 0x4e4 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_Data,D7,ReadBit(Data,7));
      da:	4c 2f       	mov	r20, r28
      dc:	44 1f       	adc	r20, r20
      de:	44 27       	eor	r20, r20
      e0:	44 1f       	adc	r20, r20
      e2:	60 91 7c 00 	lds	r22, 0x007C	; 0x80007c <__data_end>
      e6:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <LCD_Data>
      ea:	0e 94 72 02 	call	0x4e4	; 0x4e4 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_Control,E,HIGH);
      ee:	41 e0       	ldi	r20, 0x01	; 1
      f0:	60 91 80 00 	lds	r22, 0x0080	; 0x800080 <E>
      f4:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <LCD_Control>
      f8:	0e 94 72 02 	call	0x4e4	; 0x4e4 <DIO_SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      fc:	8f ec       	ldi	r24, 0xCF	; 207
      fe:	97 e0       	ldi	r25, 0x07	; 7
     100:	01 97       	sbiw	r24, 0x01	; 1
     102:	f1 f7       	brne	.-4      	; 0x100 <LCD_SendData+0x6e>
     104:	00 c0       	rjmp	.+0      	; 0x106 <LCD_SendData+0x74>
     106:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_Control,E,LOW);
     108:	40 e0       	ldi	r20, 0x00	; 0
     10a:	60 91 80 00 	lds	r22, 0x0080	; 0x800080 <E>
     10e:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <LCD_Control>
     112:	0e 94 72 02 	call	0x4e4	; 0x4e4 <DIO_SetPinValue>
	//Lower Nibble
	DIO_SetPinValue(LCD_Data,D4,ReadBit(Data,0));
     116:	4c 2f       	mov	r20, r28
     118:	41 70       	andi	r20, 0x01	; 1
     11a:	60 91 7f 00 	lds	r22, 0x007F	; 0x80007f <D4>
     11e:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <LCD_Data>
     122:	0e 94 72 02 	call	0x4e4	; 0x4e4 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_Data,D5,ReadBit(Data,1));
     126:	c1 fb       	bst	r28, 1
     128:	44 27       	eor	r20, r20
     12a:	40 f9       	bld	r20, 0
     12c:	60 91 7e 00 	lds	r22, 0x007E	; 0x80007e <D5>
     130:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <LCD_Data>
     134:	0e 94 72 02 	call	0x4e4	; 0x4e4 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_Data,D6,ReadBit(Data,2));
     138:	c2 fb       	bst	r28, 2
     13a:	44 27       	eor	r20, r20
     13c:	40 f9       	bld	r20, 0
     13e:	60 91 7d 00 	lds	r22, 0x007D	; 0x80007d <D6>
     142:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <LCD_Data>
     146:	0e 94 72 02 	call	0x4e4	; 0x4e4 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_Data,D7,ReadBit(Data,3));
     14a:	c3 fb       	bst	r28, 3
     14c:	44 27       	eor	r20, r20
     14e:	40 f9       	bld	r20, 0
     150:	60 91 7c 00 	lds	r22, 0x007C	; 0x80007c <__data_end>
     154:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <LCD_Data>
     158:	0e 94 72 02 	call	0x4e4	; 0x4e4 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_Control,E,HIGH);
     15c:	41 e0       	ldi	r20, 0x01	; 1
     15e:	60 91 80 00 	lds	r22, 0x0080	; 0x800080 <E>
     162:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <LCD_Control>
     166:	0e 94 72 02 	call	0x4e4	; 0x4e4 <DIO_SetPinValue>
     16a:	8f ec       	ldi	r24, 0xCF	; 207
     16c:	97 e0       	ldi	r25, 0x07	; 7
     16e:	01 97       	sbiw	r24, 0x01	; 1
     170:	f1 f7       	brne	.-4      	; 0x16e <LCD_SendData+0xdc>
     172:	00 c0       	rjmp	.+0      	; 0x174 <LCD_SendData+0xe2>
     174:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_Control,E,LOW);
     176:	40 e0       	ldi	r20, 0x00	; 0
     178:	60 91 80 00 	lds	r22, 0x0080	; 0x800080 <E>
     17c:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <LCD_Control>
     180:	0e 94 72 02 	call	0x4e4	; 0x4e4 <DIO_SetPinValue>
     184:	8f e9       	ldi	r24, 0x9F	; 159
     186:	9f e0       	ldi	r25, 0x0F	; 15
     188:	01 97       	sbiw	r24, 0x01	; 1
     18a:	f1 f7       	brne	.-4      	; 0x188 <LCD_SendData+0xf6>
     18c:	00 c0       	rjmp	.+0      	; 0x18e <LCD_SendData+0xfc>
     18e:	00 00       	nop
	_delay_ms(2);
}
     190:	cf 91       	pop	r28
     192:	08 95       	ret

00000194 <LCD_SendInstruction>:

void LCD_SendInstruction(uint8_t CMD)
{ 
     194:	cf 93       	push	r28
     196:	c8 2f       	mov	r28, r24
	//RW LOW
	DIO_SetPinValue(LCD_Control,RS,LOW);
     198:	40 e0       	ldi	r20, 0x00	; 0
     19a:	60 91 81 00 	lds	r22, 0x0081	; 0x800081 <RS>
     19e:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <LCD_Control>
     1a2:	0e 94 72 02 	call	0x4e4	; 0x4e4 <DIO_SetPinValue>
	//High Nibble
	DIO_SetPinValue(LCD_Data,D4,ReadBit(CMD,4));
     1a6:	c4 fb       	bst	r28, 4
     1a8:	44 27       	eor	r20, r20
     1aa:	40 f9       	bld	r20, 0
     1ac:	60 91 7f 00 	lds	r22, 0x007F	; 0x80007f <D4>
     1b0:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <LCD_Data>
     1b4:	0e 94 72 02 	call	0x4e4	; 0x4e4 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_Data,D5,ReadBit(CMD,5));
     1b8:	c5 fb       	bst	r28, 5
     1ba:	44 27       	eor	r20, r20
     1bc:	40 f9       	bld	r20, 0
     1be:	60 91 7e 00 	lds	r22, 0x007E	; 0x80007e <D5>
     1c2:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <LCD_Data>
     1c6:	0e 94 72 02 	call	0x4e4	; 0x4e4 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_Data,D6,ReadBit(CMD,6));
     1ca:	c6 fb       	bst	r28, 6
     1cc:	44 27       	eor	r20, r20
     1ce:	40 f9       	bld	r20, 0
     1d0:	60 91 7d 00 	lds	r22, 0x007D	; 0x80007d <D6>
     1d4:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <LCD_Data>
     1d8:	0e 94 72 02 	call	0x4e4	; 0x4e4 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_Data,D7,ReadBit(CMD,7));
     1dc:	4c 2f       	mov	r20, r28
     1de:	44 1f       	adc	r20, r20
     1e0:	44 27       	eor	r20, r20
     1e2:	44 1f       	adc	r20, r20
     1e4:	60 91 7c 00 	lds	r22, 0x007C	; 0x80007c <__data_end>
     1e8:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <LCD_Data>
     1ec:	0e 94 72 02 	call	0x4e4	; 0x4e4 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_Control,E,HIGH);
     1f0:	41 e0       	ldi	r20, 0x01	; 1
     1f2:	60 91 80 00 	lds	r22, 0x0080	; 0x800080 <E>
     1f6:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <LCD_Control>
     1fa:	0e 94 72 02 	call	0x4e4	; 0x4e4 <DIO_SetPinValue>
     1fe:	8f ec       	ldi	r24, 0xCF	; 207
     200:	97 e0       	ldi	r25, 0x07	; 7
     202:	01 97       	sbiw	r24, 0x01	; 1
     204:	f1 f7       	brne	.-4      	; 0x202 <LCD_SendInstruction+0x6e>
     206:	00 c0       	rjmp	.+0      	; 0x208 <LCD_SendInstruction+0x74>
     208:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_Control,E,LOW);
     20a:	40 e0       	ldi	r20, 0x00	; 0
     20c:	60 91 80 00 	lds	r22, 0x0080	; 0x800080 <E>
     210:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <LCD_Control>
     214:	0e 94 72 02 	call	0x4e4	; 0x4e4 <DIO_SetPinValue>
	if(initdone){
     218:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <initdone>
     21c:	88 23       	and	r24, r24
     21e:	b9 f1       	breq	.+110    	; 0x28e <LCD_SendInstruction+0xfa>
		//Lower Nibble
		DIO_SetPinValue(LCD_Data,D4,ReadBit(CMD,0));
     220:	4c 2f       	mov	r20, r28
     222:	41 70       	andi	r20, 0x01	; 1
     224:	60 91 7f 00 	lds	r22, 0x007F	; 0x80007f <D4>
     228:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <LCD_Data>
     22c:	0e 94 72 02 	call	0x4e4	; 0x4e4 <DIO_SetPinValue>
		DIO_SetPinValue(LCD_Data,D5,ReadBit(CMD,1));
     230:	c1 fb       	bst	r28, 1
     232:	44 27       	eor	r20, r20
     234:	40 f9       	bld	r20, 0
     236:	60 91 7e 00 	lds	r22, 0x007E	; 0x80007e <D5>
     23a:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <LCD_Data>
     23e:	0e 94 72 02 	call	0x4e4	; 0x4e4 <DIO_SetPinValue>
		DIO_SetPinValue(LCD_Data,D6,ReadBit(CMD,2));
     242:	c2 fb       	bst	r28, 2
     244:	44 27       	eor	r20, r20
     246:	40 f9       	bld	r20, 0
     248:	60 91 7d 00 	lds	r22, 0x007D	; 0x80007d <D6>
     24c:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <LCD_Data>
     250:	0e 94 72 02 	call	0x4e4	; 0x4e4 <DIO_SetPinValue>
		DIO_SetPinValue(LCD_Data,D7,ReadBit(CMD,3));
     254:	c3 fb       	bst	r28, 3
     256:	44 27       	eor	r20, r20
     258:	40 f9       	bld	r20, 0
     25a:	60 91 7c 00 	lds	r22, 0x007C	; 0x80007c <__data_end>
     25e:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <LCD_Data>
     262:	0e 94 72 02 	call	0x4e4	; 0x4e4 <DIO_SetPinValue>
		DIO_SetPinValue(LCD_Control,E,HIGH);
     266:	41 e0       	ldi	r20, 0x01	; 1
     268:	60 91 80 00 	lds	r22, 0x0080	; 0x800080 <E>
     26c:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <LCD_Control>
     270:	0e 94 72 02 	call	0x4e4	; 0x4e4 <DIO_SetPinValue>
     274:	8f ec       	ldi	r24, 0xCF	; 207
     276:	97 e0       	ldi	r25, 0x07	; 7
     278:	01 97       	sbiw	r24, 0x01	; 1
     27a:	f1 f7       	brne	.-4      	; 0x278 <LCD_SendInstruction+0xe4>
     27c:	00 c0       	rjmp	.+0      	; 0x27e <LCD_SendInstruction+0xea>
     27e:	00 00       	nop
		_delay_ms(1);
		DIO_SetPinValue(LCD_Control,E,LOW);
     280:	40 e0       	ldi	r20, 0x00	; 0
     282:	60 91 80 00 	lds	r22, 0x0080	; 0x800080 <E>
     286:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <LCD_Control>
     28a:	0e 94 72 02 	call	0x4e4	; 0x4e4 <DIO_SetPinValue>
     28e:	8f e9       	ldi	r24, 0x9F	; 159
     290:	9f e0       	ldi	r25, 0x0F	; 15
     292:	01 97       	sbiw	r24, 0x01	; 1
     294:	f1 f7       	brne	.-4      	; 0x292 <LCD_SendInstruction+0xfe>
     296:	00 c0       	rjmp	.+0      	; 0x298 <LCD_SendInstruction+0x104>
     298:	00 00       	nop
	}
	_delay_ms(2);
}
     29a:	cf 91       	pop	r28
     29c:	08 95       	ret

0000029e <LCD_Init>:
#include "LCD.h"
static uint8_t initdone=0;
static DIO_PORT_ID LCD_Data,LCD_Control;
static DIO_PIN_ID RS, E, D4, D5, D6, D7;
void LCD_Init(DIO_PORT_ID LCD_Data_Port,DIO_PORT_ID LCD_Control_Port ,DIO_PIN_ID rs,DIO_PIN_ID e,DIO_PIN_ID d4,DIO_PIN_ID d5,DIO_PIN_ID d6,DIO_PIN_ID d7)
{
     29e:	af 92       	push	r10
     2a0:	cf 92       	push	r12
     2a2:	ef 92       	push	r14
     2a4:	0f 93       	push	r16
     2a6:	cf 93       	push	r28
     2a8:	df 93       	push	r29
     2aa:	c8 2f       	mov	r28, r24
     2ac:	d6 2f       	mov	r29, r22
     2ae:	64 2f       	mov	r22, r20
	LCD_Data=LCD_Data_Port;
     2b0:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <LCD_Data>
	LCD_Control=LCD_Control_Port;
     2b4:	d0 93 82 00 	sts	0x0082, r29	; 0x800082 <LCD_Control>
	RS=rs;
     2b8:	40 93 81 00 	sts	0x0081, r20	; 0x800081 <RS>
	E=e;
     2bc:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <E>
	D4=d4;
     2c0:	00 93 7f 00 	sts	0x007F, r16	; 0x80007f <D4>
	D5=d5;
     2c4:	e0 92 7e 00 	sts	0x007E, r14	; 0x80007e <D5>
	D6=d6;
     2c8:	c0 92 7d 00 	sts	0x007D, r12	; 0x80007d <D6>
	D7=d7;
     2cc:	a0 92 7c 00 	sts	0x007C, r10	; 0x80007c <__data_end>
	DIO_SetPinDirection(LCD_Control_Port,RS,Output);
     2d0:	41 e0       	ldi	r20, 0x01	; 1
     2d2:	8d 2f       	mov	r24, r29
     2d4:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_Control_Port,E,Output);
     2d8:	41 e0       	ldi	r20, 0x01	; 1
     2da:	60 91 80 00 	lds	r22, 0x0080	; 0x800080 <E>
     2de:	8d 2f       	mov	r24, r29
     2e0:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_Data_Port,D4,Output);
     2e4:	41 e0       	ldi	r20, 0x01	; 1
     2e6:	60 91 7f 00 	lds	r22, 0x007F	; 0x80007f <D4>
     2ea:	8c 2f       	mov	r24, r28
     2ec:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_Data_Port,D5,Output);
     2f0:	41 e0       	ldi	r20, 0x01	; 1
     2f2:	60 91 7e 00 	lds	r22, 0x007E	; 0x80007e <D5>
     2f6:	8c 2f       	mov	r24, r28
     2f8:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_Data_Port,D6,Output);
     2fc:	41 e0       	ldi	r20, 0x01	; 1
     2fe:	60 91 7d 00 	lds	r22, 0x007D	; 0x80007d <D6>
     302:	8c 2f       	mov	r24, r28
     304:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_Data_Port,D7,Output);
     308:	41 e0       	ldi	r20, 0x01	; 1
     30a:	60 91 7c 00 	lds	r22, 0x007C	; 0x80007c <__data_end>
     30e:	8c 2f       	mov	r24, r28
     310:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <DIO_SetPinDirection>
     314:	8f e5       	ldi	r24, 0x5F	; 95
     316:	9a ee       	ldi	r25, 0xEA	; 234
     318:	01 97       	sbiw	r24, 0x01	; 1
     31a:	f1 f7       	brne	.-4      	; 0x318 <LCD_Init+0x7a>
     31c:	00 c0       	rjmp	.+0      	; 0x31e <LCD_Init+0x80>
     31e:	00 00       	nop
	_delay_ms(30);
	LCD_SendInstruction(0x20);
     320:	80 e2       	ldi	r24, 0x20	; 32
     322:	0e 94 ca 00 	call	0x194	; 0x194 <LCD_SendInstruction>
	LCD_SendInstruction(0x20);
     326:	80 e2       	ldi	r24, 0x20	; 32
     328:	0e 94 ca 00 	call	0x194	; 0x194 <LCD_SendInstruction>
	LCD_SendInstruction(0x80); //Send 2 Line Mode with 5*7 Pixel
     32c:	80 e8       	ldi	r24, 0x80	; 128
     32e:	0e 94 ca 00 	call	0x194	; 0x194 <LCD_SendInstruction>
     332:	8f ec       	ldi	r24, 0xCF	; 207
     334:	97 e0       	ldi	r25, 0x07	; 7
     336:	01 97       	sbiw	r24, 0x01	; 1
     338:	f1 f7       	brne	.-4      	; 0x336 <LCD_Init+0x98>
     33a:	00 c0       	rjmp	.+0      	; 0x33c <LCD_Init+0x9e>
     33c:	00 00       	nop
	_delay_ms(1);
	LCD_SendInstruction(0x00); 
     33e:	80 e0       	ldi	r24, 0x00	; 0
     340:	0e 94 ca 00 	call	0x194	; 0x194 <LCD_SendInstruction>
	LCD_SendInstruction(0xC0); //Send Display on Cursor on Blink off
     344:	80 ec       	ldi	r24, 0xC0	; 192
     346:	0e 94 ca 00 	call	0x194	; 0x194 <LCD_SendInstruction>
     34a:	8f ec       	ldi	r24, 0xCF	; 207
     34c:	97 e0       	ldi	r25, 0x07	; 7
     34e:	01 97       	sbiw	r24, 0x01	; 1
     350:	f1 f7       	brne	.-4      	; 0x34e <LCD_Init+0xb0>
     352:	00 c0       	rjmp	.+0      	; 0x354 <LCD_Init+0xb6>
     354:	00 00       	nop
	_delay_ms(1);

	LCD_SendInstruction(0x00);
     356:	80 e0       	ldi	r24, 0x00	; 0
     358:	0e 94 ca 00 	call	0x194	; 0x194 <LCD_SendInstruction>
	LCD_SendInstruction(0x10);
     35c:	80 e1       	ldi	r24, 0x10	; 16
     35e:	0e 94 ca 00 	call	0x194	; 0x194 <LCD_SendInstruction>
     362:	8f e9       	ldi	r24, 0x9F	; 159
     364:	9f e0       	ldi	r25, 0x0F	; 15
     366:	01 97       	sbiw	r24, 0x01	; 1
     368:	f1 f7       	brne	.-4      	; 0x366 <LCD_Init+0xc8>
     36a:	00 c0       	rjmp	.+0      	; 0x36c <LCD_Init+0xce>
     36c:	00 00       	nop
	_delay_ms(2);
	initdone=1;
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <initdone>
}
     374:	df 91       	pop	r29
     376:	cf 91       	pop	r28
     378:	0f 91       	pop	r16
     37a:	ef 90       	pop	r14
     37c:	cf 90       	pop	r12
     37e:	af 90       	pop	r10
     380:	08 95       	ret

00000382 <LCD_Print>:
		DIO_SetPinValue(LCD_Control,E,LOW);
	}
	_delay_ms(2);
}
void LCD_Print(uint8_t* Data)
{
     382:	cf 93       	push	r28
     384:	df 93       	push	r29
     386:	ec 01       	movw	r28, r24
	while(*Data!='\0')
     388:	03 c0       	rjmp	.+6      	; 0x390 <LCD_Print+0xe>
	{
		LCD_SendData(*Data);
     38a:	0e 94 49 00 	call	0x92	; 0x92 <LCD_SendData>
		Data++;
     38e:	21 96       	adiw	r28, 0x01	; 1
	}
	_delay_ms(2);
}
void LCD_Print(uint8_t* Data)
{
	while(*Data!='\0')
     390:	88 81       	ld	r24, Y
     392:	81 11       	cpse	r24, r1
     394:	fa cf       	rjmp	.-12     	; 0x38a <LCD_Print+0x8>
	{
		LCD_SendData(*Data);
		Data++;
	}
}
     396:	df 91       	pop	r29
     398:	cf 91       	pop	r28
     39a:	08 95       	ret

0000039c <main>:
 * Author : The7ag
 */ 
#include "UTIL/FreeRTOSTest/TestApp.h"
int main(void)
{
	RTOS_test();
     39c:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <RTOS_test>
}
     3a0:	80 e0       	ldi	r24, 0x00	; 0
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	08 95       	ret

000003a6 <__vector_16>:
{
	CallBackPtr = CopyFuncPtr;
}
void __vector_16(void) __attribute__((signal,used));
void __vector_16()
{
     3a6:	1f 92       	push	r1
     3a8:	0f 92       	push	r0
     3aa:	0f b6       	in	r0, 0x3f	; 63
     3ac:	0f 92       	push	r0
     3ae:	11 24       	eor	r1, r1
     3b0:	2f 93       	push	r18
     3b2:	3f 93       	push	r19
     3b4:	4f 93       	push	r20
     3b6:	5f 93       	push	r21
     3b8:	6f 93       	push	r22
     3ba:	7f 93       	push	r23
     3bc:	8f 93       	push	r24
     3be:	9f 93       	push	r25
     3c0:	af 93       	push	r26
     3c2:	bf 93       	push	r27
     3c4:	ef 93       	push	r30
     3c6:	ff 93       	push	r31
	if (CallBackPtr != NULL)
     3c8:	e0 91 85 00 	lds	r30, 0x0085	; 0x800085 <CallBackPtr>
     3cc:	f0 91 86 00 	lds	r31, 0x0086	; 0x800086 <CallBackPtr+0x1>
     3d0:	30 97       	sbiw	r30, 0x00	; 0
     3d2:	09 f0       	breq	.+2      	; 0x3d6 <__vector_16+0x30>
	{
		CallBackPtr();
     3d4:	09 95       	icall
	}
     3d6:	ff 91       	pop	r31
     3d8:	ef 91       	pop	r30
     3da:	bf 91       	pop	r27
     3dc:	af 91       	pop	r26
     3de:	9f 91       	pop	r25
     3e0:	8f 91       	pop	r24
     3e2:	7f 91       	pop	r23
     3e4:	6f 91       	pop	r22
     3e6:	5f 91       	pop	r21
     3e8:	4f 91       	pop	r20
     3ea:	3f 91       	pop	r19
     3ec:	2f 91       	pop	r18
     3ee:	0f 90       	pop	r0
     3f0:	0f be       	out	0x3f, r0	; 63
     3f2:	0f 90       	pop	r0
     3f4:	1f 90       	pop	r1
     3f6:	18 95       	reti

000003f8 <DIO_SetPinDirection>:
	}
}

void DIO_SetPinDirection(DIO_PORT_ID port_name,DIO_PIN_ID pin_name,DIO_DIRECTION direction)
{
if (port_name<=PORTD	&&	port_name>=PORTA	&&	pin_name<=Pin7	&& pin_name>=Pin0)
     3f8:	84 30       	cpi	r24, 0x04	; 4
     3fa:	08 f0       	brcs	.+2      	; 0x3fe <DIO_SetPinDirection+0x6>
     3fc:	72 c0       	rjmp	.+228    	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
     3fe:	68 30       	cpi	r22, 0x08	; 8
     400:	08 f0       	brcs	.+2      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
     402:	6f c0       	rjmp	.+222    	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
{
	if (direction==Output)
     404:	41 30       	cpi	r20, 0x01	; 1
     406:	a1 f5       	brne	.+104    	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
	{
		switch(port_name)
     408:	81 30       	cpi	r24, 0x01	; 1
     40a:	89 f0       	breq	.+34     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
     40c:	28 f0       	brcs	.+10     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
     40e:	82 30       	cpi	r24, 0x02	; 2
     410:	c9 f0       	breq	.+50     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
     412:	83 30       	cpi	r24, 0x03	; 3
     414:	11 f1       	breq	.+68     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
     416:	08 95       	ret
		{
			case PORTA:	SetBit(DDRA_Reg,pin_name) ;break;
     418:	2a b3       	in	r18, 0x1a	; 26
     41a:	81 e0       	ldi	r24, 0x01	; 1
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	02 c0       	rjmp	.+4      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
     420:	88 0f       	add	r24, r24
     422:	99 1f       	adc	r25, r25
     424:	6a 95       	dec	r22
     426:	e2 f7       	brpl	.-8      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
     428:	82 2b       	or	r24, r18
     42a:	8a bb       	out	0x1a, r24	; 26
     42c:	08 95       	ret
			case PORTB: SetBit(DDRB_Reg,pin_name) ;break;
     42e:	27 b3       	in	r18, 0x17	; 23
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	02 c0       	rjmp	.+4      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
     436:	88 0f       	add	r24, r24
     438:	99 1f       	adc	r25, r25
     43a:	6a 95       	dec	r22
     43c:	e2 f7       	brpl	.-8      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
     43e:	82 2b       	or	r24, r18
     440:	87 bb       	out	0x17, r24	; 23
     442:	08 95       	ret
			case PORTC: SetBit(DDRC_Reg,pin_name) ;break;
     444:	24 b3       	in	r18, 0x14	; 20
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	02 c0       	rjmp	.+4      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
     44c:	88 0f       	add	r24, r24
     44e:	99 1f       	adc	r25, r25
     450:	6a 95       	dec	r22
     452:	e2 f7       	brpl	.-8      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
     454:	82 2b       	or	r24, r18
     456:	84 bb       	out	0x14, r24	; 20
     458:	08 95       	ret
			case PORTD: SetBit(DDRD_Reg,pin_name) ;break;
     45a:	21 b3       	in	r18, 0x11	; 17
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	02 c0       	rjmp	.+4      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
     462:	88 0f       	add	r24, r24
     464:	99 1f       	adc	r25, r25
     466:	6a 95       	dec	r22
     468:	e2 f7       	brpl	.-8      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
     46a:	82 2b       	or	r24, r18
     46c:	81 bb       	out	0x11, r24	; 17
     46e:	08 95       	ret

		}
	}else if (direction==Input)
     470:	41 11       	cpse	r20, r1
     472:	37 c0       	rjmp	.+110    	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
	{
		switch(port_name)
     474:	81 30       	cpi	r24, 0x01	; 1
     476:	91 f0       	breq	.+36     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
     478:	28 f0       	brcs	.+10     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
     47a:	82 30       	cpi	r24, 0x02	; 2
     47c:	d9 f0       	breq	.+54     	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
     47e:	83 30       	cpi	r24, 0x03	; 3
     480:	29 f1       	breq	.+74     	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
     482:	08 95       	ret
		{
			case PORTA:	ClearBit(DDRA_Reg,pin_name) ;break;
     484:	2a b3       	in	r18, 0x1a	; 26
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	02 c0       	rjmp	.+4      	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
     48c:	88 0f       	add	r24, r24
     48e:	99 1f       	adc	r25, r25
     490:	6a 95       	dec	r22
     492:	e2 f7       	brpl	.-8      	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
     494:	80 95       	com	r24
     496:	82 23       	and	r24, r18
     498:	8a bb       	out	0x1a, r24	; 26
     49a:	08 95       	ret
			case PORTB: ClearBit(DDRB_Reg,pin_name) ;break;
     49c:	27 b3       	in	r18, 0x17	; 23
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
     4a4:	88 0f       	add	r24, r24
     4a6:	99 1f       	adc	r25, r25
     4a8:	6a 95       	dec	r22
     4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
     4ac:	80 95       	com	r24
     4ae:	82 23       	and	r24, r18
     4b0:	87 bb       	out	0x17, r24	; 23
     4b2:	08 95       	ret
			case PORTC: ClearBit(DDRC_Reg,pin_name) ;break;
     4b4:	24 b3       	in	r18, 0x14	; 20
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
     4bc:	88 0f       	add	r24, r24
     4be:	99 1f       	adc	r25, r25
     4c0:	6a 95       	dec	r22
     4c2:	e2 f7       	brpl	.-8      	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
     4c4:	80 95       	com	r24
     4c6:	82 23       	and	r24, r18
     4c8:	84 bb       	out	0x14, r24	; 20
     4ca:	08 95       	ret
			case PORTD: ClearBit(DDRD_Reg,pin_name) ;break;
     4cc:	21 b3       	in	r18, 0x11	; 17
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
     4d4:	88 0f       	add	r24, r24
     4d6:	99 1f       	adc	r25, r25
     4d8:	6a 95       	dec	r22
     4da:	e2 f7       	brpl	.-8      	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
     4dc:	80 95       	com	r24
     4de:	82 23       	and	r24, r18
     4e0:	81 bb       	out	0x11, r24	; 17
     4e2:	08 95       	ret

000004e4 <DIO_SetPinValue>:
}
	
}

void DIO_SetPinValue(DIO_PORT_ID port_name,DIO_PIN_ID pin_name,DIO_VALUE value){
	if (port_name<=PORTD	&&	port_name>=PORTA	&&	pin_name<=Pin7	&& pin_name>=Pin0)
     4e4:	84 30       	cpi	r24, 0x04	; 4
     4e6:	08 f0       	brcs	.+2      	; 0x4ea <DIO_SetPinValue+0x6>
     4e8:	72 c0       	rjmp	.+228    	; 0x5ce <DIO_SetPinValue+0xea>
     4ea:	68 30       	cpi	r22, 0x08	; 8
     4ec:	08 f0       	brcs	.+2      	; 0x4f0 <DIO_SetPinValue+0xc>
     4ee:	6f c0       	rjmp	.+222    	; 0x5ce <DIO_SetPinValue+0xea>
	{
		if (value==HIGH)
     4f0:	41 30       	cpi	r20, 0x01	; 1
     4f2:	a1 f5       	brne	.+104    	; 0x55c <DIO_SetPinValue+0x78>
		{
			switch(port_name)
     4f4:	81 30       	cpi	r24, 0x01	; 1
     4f6:	89 f0       	breq	.+34     	; 0x51a <DIO_SetPinValue+0x36>
     4f8:	28 f0       	brcs	.+10     	; 0x504 <DIO_SetPinValue+0x20>
     4fa:	82 30       	cpi	r24, 0x02	; 2
     4fc:	c9 f0       	breq	.+50     	; 0x530 <DIO_SetPinValue+0x4c>
     4fe:	83 30       	cpi	r24, 0x03	; 3
     500:	11 f1       	breq	.+68     	; 0x546 <DIO_SetPinValue+0x62>
     502:	08 95       	ret
			{
				case PORTA:	SetBit(PORTA_Reg,pin_name) ;break;
     504:	2b b3       	in	r18, 0x1b	; 27
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	02 c0       	rjmp	.+4      	; 0x510 <DIO_SetPinValue+0x2c>
     50c:	88 0f       	add	r24, r24
     50e:	99 1f       	adc	r25, r25
     510:	6a 95       	dec	r22
     512:	e2 f7       	brpl	.-8      	; 0x50c <DIO_SetPinValue+0x28>
     514:	82 2b       	or	r24, r18
     516:	8b bb       	out	0x1b, r24	; 27
     518:	08 95       	ret
				case PORTB: SetBit(PORTB_Reg,pin_name) ;break;
     51a:	28 b3       	in	r18, 0x18	; 24
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	02 c0       	rjmp	.+4      	; 0x526 <DIO_SetPinValue+0x42>
     522:	88 0f       	add	r24, r24
     524:	99 1f       	adc	r25, r25
     526:	6a 95       	dec	r22
     528:	e2 f7       	brpl	.-8      	; 0x522 <DIO_SetPinValue+0x3e>
     52a:	82 2b       	or	r24, r18
     52c:	88 bb       	out	0x18, r24	; 24
     52e:	08 95       	ret
				case PORTC: SetBit(PORTC_Reg,pin_name) ;break;
     530:	25 b3       	in	r18, 0x15	; 21
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	02 c0       	rjmp	.+4      	; 0x53c <DIO_SetPinValue+0x58>
     538:	88 0f       	add	r24, r24
     53a:	99 1f       	adc	r25, r25
     53c:	6a 95       	dec	r22
     53e:	e2 f7       	brpl	.-8      	; 0x538 <DIO_SetPinValue+0x54>
     540:	82 2b       	or	r24, r18
     542:	85 bb       	out	0x15, r24	; 21
     544:	08 95       	ret
				case PORTD: SetBit(PORTD_Reg,pin_name) ;break;
     546:	22 b3       	in	r18, 0x12	; 18
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	02 c0       	rjmp	.+4      	; 0x552 <DIO_SetPinValue+0x6e>
     54e:	88 0f       	add	r24, r24
     550:	99 1f       	adc	r25, r25
     552:	6a 95       	dec	r22
     554:	e2 f7       	brpl	.-8      	; 0x54e <DIO_SetPinValue+0x6a>
     556:	82 2b       	or	r24, r18
     558:	82 bb       	out	0x12, r24	; 18
     55a:	08 95       	ret

			}
		}else if (value==LOW)
     55c:	41 11       	cpse	r20, r1
     55e:	37 c0       	rjmp	.+110    	; 0x5ce <DIO_SetPinValue+0xea>
		{
			switch(port_name)
     560:	81 30       	cpi	r24, 0x01	; 1
     562:	91 f0       	breq	.+36     	; 0x588 <DIO_SetPinValue+0xa4>
     564:	28 f0       	brcs	.+10     	; 0x570 <DIO_SetPinValue+0x8c>
     566:	82 30       	cpi	r24, 0x02	; 2
     568:	d9 f0       	breq	.+54     	; 0x5a0 <DIO_SetPinValue+0xbc>
     56a:	83 30       	cpi	r24, 0x03	; 3
     56c:	29 f1       	breq	.+74     	; 0x5b8 <DIO_SetPinValue+0xd4>
     56e:	08 95       	ret
			{
				case PORTA:	ClearBit(PORTA_Reg,pin_name) ;break;
     570:	2b b3       	in	r18, 0x1b	; 27
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	02 c0       	rjmp	.+4      	; 0x57c <DIO_SetPinValue+0x98>
     578:	88 0f       	add	r24, r24
     57a:	99 1f       	adc	r25, r25
     57c:	6a 95       	dec	r22
     57e:	e2 f7       	brpl	.-8      	; 0x578 <DIO_SetPinValue+0x94>
     580:	80 95       	com	r24
     582:	82 23       	and	r24, r18
     584:	8b bb       	out	0x1b, r24	; 27
     586:	08 95       	ret
				case PORTB: ClearBit(PORTB_Reg,pin_name) ;break;
     588:	28 b3       	in	r18, 0x18	; 24
     58a:	81 e0       	ldi	r24, 0x01	; 1
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	02 c0       	rjmp	.+4      	; 0x594 <DIO_SetPinValue+0xb0>
     590:	88 0f       	add	r24, r24
     592:	99 1f       	adc	r25, r25
     594:	6a 95       	dec	r22
     596:	e2 f7       	brpl	.-8      	; 0x590 <DIO_SetPinValue+0xac>
     598:	80 95       	com	r24
     59a:	82 23       	and	r24, r18
     59c:	88 bb       	out	0x18, r24	; 24
     59e:	08 95       	ret
				case PORTC: ClearBit(PORTC_Reg,pin_name) ;break;
     5a0:	25 b3       	in	r18, 0x15	; 21
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	02 c0       	rjmp	.+4      	; 0x5ac <DIO_SetPinValue+0xc8>
     5a8:	88 0f       	add	r24, r24
     5aa:	99 1f       	adc	r25, r25
     5ac:	6a 95       	dec	r22
     5ae:	e2 f7       	brpl	.-8      	; 0x5a8 <DIO_SetPinValue+0xc4>
     5b0:	80 95       	com	r24
     5b2:	82 23       	and	r24, r18
     5b4:	85 bb       	out	0x15, r24	; 21
     5b6:	08 95       	ret
				case PORTD: ClearBit(PORTD_Reg,pin_name) ;break;
     5b8:	22 b3       	in	r18, 0x12	; 18
     5ba:	81 e0       	ldi	r24, 0x01	; 1
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	02 c0       	rjmp	.+4      	; 0x5c4 <DIO_SetPinValue+0xe0>
     5c0:	88 0f       	add	r24, r24
     5c2:	99 1f       	adc	r25, r25
     5c4:	6a 95       	dec	r22
     5c6:	e2 f7       	brpl	.-8      	; 0x5c0 <DIO_SetPinValue+0xdc>
     5c8:	80 95       	com	r24
     5ca:	82 23       	and	r24, r18
     5cc:	82 bb       	out	0x12, r24	; 18
     5ce:	08 95       	ret

000005d0 <__vector_1>:
}

/*ISR EXT0*/
void __vector_1(void)__attribute__((signal,used)); 
void __vector_1(void)
{
     5d0:	1f 92       	push	r1
     5d2:	0f 92       	push	r0
     5d4:	0f b6       	in	r0, 0x3f	; 63
     5d6:	0f 92       	push	r0
     5d8:	11 24       	eor	r1, r1
     5da:	2f 93       	push	r18
     5dc:	3f 93       	push	r19
     5de:	4f 93       	push	r20
     5e0:	5f 93       	push	r21
     5e2:	6f 93       	push	r22
     5e4:	7f 93       	push	r23
     5e6:	8f 93       	push	r24
     5e8:	9f 93       	push	r25
     5ea:	af 93       	push	r26
     5ec:	bf 93       	push	r27
     5ee:	ef 93       	push	r30
     5f0:	ff 93       	push	r31
	if (CallBackPtr0 != NULL)
     5f2:	e0 91 8b 00 	lds	r30, 0x008B	; 0x80008b <CallBackPtr0>
     5f6:	f0 91 8c 00 	lds	r31, 0x008C	; 0x80008c <CallBackPtr0+0x1>
     5fa:	30 97       	sbiw	r30, 0x00	; 0
     5fc:	09 f0       	breq	.+2      	; 0x600 <__vector_1+0x30>
	{
		CallBackPtr0();
     5fe:	09 95       	icall
	}
}
     600:	ff 91       	pop	r31
     602:	ef 91       	pop	r30
     604:	bf 91       	pop	r27
     606:	af 91       	pop	r26
     608:	9f 91       	pop	r25
     60a:	8f 91       	pop	r24
     60c:	7f 91       	pop	r23
     60e:	6f 91       	pop	r22
     610:	5f 91       	pop	r21
     612:	4f 91       	pop	r20
     614:	3f 91       	pop	r19
     616:	2f 91       	pop	r18
     618:	0f 90       	pop	r0
     61a:	0f be       	out	0x3f, r0	; 63
     61c:	0f 90       	pop	r0
     61e:	1f 90       	pop	r1
     620:	18 95       	reti

00000622 <__vector_2>:
/*ISR EXT1*/
void __vector_2(void)__attribute__((signal,used));
void __vector_2(void)
{
     622:	1f 92       	push	r1
     624:	0f 92       	push	r0
     626:	0f b6       	in	r0, 0x3f	; 63
     628:	0f 92       	push	r0
     62a:	11 24       	eor	r1, r1
     62c:	2f 93       	push	r18
     62e:	3f 93       	push	r19
     630:	4f 93       	push	r20
     632:	5f 93       	push	r21
     634:	6f 93       	push	r22
     636:	7f 93       	push	r23
     638:	8f 93       	push	r24
     63a:	9f 93       	push	r25
     63c:	af 93       	push	r26
     63e:	bf 93       	push	r27
     640:	ef 93       	push	r30
     642:	ff 93       	push	r31
	if (CallBackPtr1 != NULL)
     644:	e0 91 89 00 	lds	r30, 0x0089	; 0x800089 <CallBackPtr1>
     648:	f0 91 8a 00 	lds	r31, 0x008A	; 0x80008a <CallBackPtr1+0x1>
     64c:	30 97       	sbiw	r30, 0x00	; 0
     64e:	09 f0       	breq	.+2      	; 0x652 <__vector_2+0x30>
	{
		CallBackPtr1();
     650:	09 95       	icall
	}
}
     652:	ff 91       	pop	r31
     654:	ef 91       	pop	r30
     656:	bf 91       	pop	r27
     658:	af 91       	pop	r26
     65a:	9f 91       	pop	r25
     65c:	8f 91       	pop	r24
     65e:	7f 91       	pop	r23
     660:	6f 91       	pop	r22
     662:	5f 91       	pop	r21
     664:	4f 91       	pop	r20
     666:	3f 91       	pop	r19
     668:	2f 91       	pop	r18
     66a:	0f 90       	pop	r0
     66c:	0f be       	out	0x3f, r0	; 63
     66e:	0f 90       	pop	r0
     670:	1f 90       	pop	r1
     672:	18 95       	reti

00000674 <__vector_3>:
/*ISR EXT2*/
void __vector_3(void)__attribute__((signal,used));
void __vector_3(void)
{
     674:	1f 92       	push	r1
     676:	0f 92       	push	r0
     678:	0f b6       	in	r0, 0x3f	; 63
     67a:	0f 92       	push	r0
     67c:	11 24       	eor	r1, r1
     67e:	2f 93       	push	r18
     680:	3f 93       	push	r19
     682:	4f 93       	push	r20
     684:	5f 93       	push	r21
     686:	6f 93       	push	r22
     688:	7f 93       	push	r23
     68a:	8f 93       	push	r24
     68c:	9f 93       	push	r25
     68e:	af 93       	push	r26
     690:	bf 93       	push	r27
     692:	ef 93       	push	r30
     694:	ff 93       	push	r31
	if (CallBackPtr2 != NULL)
     696:	e0 91 87 00 	lds	r30, 0x0087	; 0x800087 <CallBackPtr2>
     69a:	f0 91 88 00 	lds	r31, 0x0088	; 0x800088 <CallBackPtr2+0x1>
     69e:	30 97       	sbiw	r30, 0x00	; 0
     6a0:	09 f0       	breq	.+2      	; 0x6a4 <__vector_3+0x30>
	{
		CallBackPtr2();
     6a2:	09 95       	icall
	}
     6a4:	ff 91       	pop	r31
     6a6:	ef 91       	pop	r30
     6a8:	bf 91       	pop	r27
     6aa:	af 91       	pop	r26
     6ac:	9f 91       	pop	r25
     6ae:	8f 91       	pop	r24
     6b0:	7f 91       	pop	r23
     6b2:	6f 91       	pop	r22
     6b4:	5f 91       	pop	r21
     6b6:	4f 91       	pop	r20
     6b8:	3f 91       	pop	r19
     6ba:	2f 91       	pop	r18
     6bc:	0f 90       	pop	r0
     6be:	0f be       	out	0x3f, r0	; 63
     6c0:	0f 90       	pop	r0
     6c2:	1f 90       	pop	r1
     6c4:	18 95       	reti

000006c6 <__vector_10>:
 		 TIMER0_CTCCallBackPointer = Copy_Ptr;
	  
	 }/*end of MTIMER0_voidCTCCallBackfn()*/

	 void __vector_10(void)/*Timer0 CTC ISR*/
	 {
     6c6:	1f 92       	push	r1
     6c8:	0f 92       	push	r0
     6ca:	0f b6       	in	r0, 0x3f	; 63
     6cc:	0f 92       	push	r0
     6ce:	11 24       	eor	r1, r1
     6d0:	2f 93       	push	r18
     6d2:	3f 93       	push	r19
     6d4:	4f 93       	push	r20
     6d6:	5f 93       	push	r21
     6d8:	6f 93       	push	r22
     6da:	7f 93       	push	r23
     6dc:	8f 93       	push	r24
     6de:	9f 93       	push	r25
     6e0:	af 93       	push	r26
     6e2:	bf 93       	push	r27
     6e4:	ef 93       	push	r30
     6e6:	ff 93       	push	r31
		 //FOR RTO
		static uint16 counter=0;
		counter++;
     6e8:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <counter.1786>
     6ec:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <counter.1786+0x1>
     6f0:	01 96       	adiw	r24, 0x01	; 1
     6f2:	90 93 8e 00 	sts	0x008E, r25	; 0x80008e <counter.1786+0x1>
     6f6:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <counter.1786>
		if(counter == 5 ) //for 1 ms delay
     6fa:	05 97       	sbiw	r24, 0x05	; 5
     6fc:	59 f4       	brne	.+22     	; 0x714 <__vector_10+0x4e>
		{
			//clear counter
			counter=0;
     6fe:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <counter.1786+0x1>
     702:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <counter.1786>
			//For normal CTC
			if(TIMER0_CTCCallBackPointer != NULL)
     706:	e0 91 8f 00 	lds	r30, 0x008F	; 0x80008f <TIMER0_CTCCallBackPointer>
     70a:	f0 91 90 00 	lds	r31, 0x0090	; 0x800090 <TIMER0_CTCCallBackPointer+0x1>
     70e:	30 97       	sbiw	r30, 0x00	; 0
     710:	09 f0       	breq	.+2      	; 0x714 <__vector_10+0x4e>
			{
				TIMER0_CTCCallBackPointer();
     712:	09 95       	icall
			}
		}
	 }/*end of __vector_10()*/
     714:	ff 91       	pop	r31
     716:	ef 91       	pop	r30
     718:	bf 91       	pop	r27
     71a:	af 91       	pop	r26
     71c:	9f 91       	pop	r25
     71e:	8f 91       	pop	r24
     720:	7f 91       	pop	r23
     722:	6f 91       	pop	r22
     724:	5f 91       	pop	r21
     726:	4f 91       	pop	r20
     728:	3f 91       	pop	r19
     72a:	2f 91       	pop	r18
     72c:	0f 90       	pop	r0
     72e:	0f be       	out	0x3f, r0	; 63
     730:	0f 90       	pop	r0
     732:	1f 90       	pop	r1
     734:	18 95       	reti

00000736 <__vector_9>:
void TMR1_IC_SetCallBack(void(*LocPFunc)(void))
{
	GPFunc_IC=LocPFunc;
}
void __vector_9(void)
 {
     736:	1f 92       	push	r1
     738:	0f 92       	push	r0
     73a:	0f b6       	in	r0, 0x3f	; 63
     73c:	0f 92       	push	r0
     73e:	11 24       	eor	r1, r1
     740:	2f 93       	push	r18
     742:	3f 93       	push	r19
     744:	4f 93       	push	r20
     746:	5f 93       	push	r21
     748:	6f 93       	push	r22
     74a:	7f 93       	push	r23
     74c:	8f 93       	push	r24
     74e:	9f 93       	push	r25
     750:	af 93       	push	r26
     752:	bf 93       	push	r27
     754:	ef 93       	push	r30
     756:	ff 93       	push	r31
	if(GPFunc_OF!=NULL)
     758:	e0 91 95 00 	lds	r30, 0x0095	; 0x800095 <GPFunc_OF>
     75c:	f0 91 96 00 	lds	r31, 0x0096	; 0x800096 <GPFunc_OF+0x1>
     760:	30 97       	sbiw	r30, 0x00	; 0
     762:	09 f0       	breq	.+2      	; 0x766 <__vector_9+0x30>
	{
		GPFunc_OF();
     764:	09 95       	icall
	}
	
}
     766:	ff 91       	pop	r31
     768:	ef 91       	pop	r30
     76a:	bf 91       	pop	r27
     76c:	af 91       	pop	r26
     76e:	9f 91       	pop	r25
     770:	8f 91       	pop	r24
     772:	7f 91       	pop	r23
     774:	6f 91       	pop	r22
     776:	5f 91       	pop	r21
     778:	4f 91       	pop	r20
     77a:	3f 91       	pop	r19
     77c:	2f 91       	pop	r18
     77e:	0f 90       	pop	r0
     780:	0f be       	out	0x3f, r0	; 63
     782:	0f 90       	pop	r0
     784:	1f 90       	pop	r1
     786:	18 95       	reti

00000788 <__vector_8>:
void __vector_8(void)
{
     788:	1f 92       	push	r1
     78a:	0f 92       	push	r0
     78c:	0f b6       	in	r0, 0x3f	; 63
     78e:	0f 92       	push	r0
     790:	11 24       	eor	r1, r1
     792:	2f 93       	push	r18
     794:	3f 93       	push	r19
     796:	4f 93       	push	r20
     798:	5f 93       	push	r21
     79a:	6f 93       	push	r22
     79c:	7f 93       	push	r23
     79e:	8f 93       	push	r24
     7a0:	9f 93       	push	r25
     7a2:	af 93       	push	r26
     7a4:	bf 93       	push	r27
     7a6:	ef 93       	push	r30
     7a8:	ff 93       	push	r31
	if(GPFunc_OCB!=NULL)
     7aa:	e0 91 93 00 	lds	r30, 0x0093	; 0x800093 <GPFunc_OCB>
     7ae:	f0 91 94 00 	lds	r31, 0x0094	; 0x800094 <GPFunc_OCB+0x1>
     7b2:	30 97       	sbiw	r30, 0x00	; 0
     7b4:	09 f0       	breq	.+2      	; 0x7b8 <__vector_8+0x30>
	{
		GPFunc_OCB();
     7b6:	09 95       	icall
	}	
}
     7b8:	ff 91       	pop	r31
     7ba:	ef 91       	pop	r30
     7bc:	bf 91       	pop	r27
     7be:	af 91       	pop	r26
     7c0:	9f 91       	pop	r25
     7c2:	8f 91       	pop	r24
     7c4:	7f 91       	pop	r23
     7c6:	6f 91       	pop	r22
     7c8:	5f 91       	pop	r21
     7ca:	4f 91       	pop	r20
     7cc:	3f 91       	pop	r19
     7ce:	2f 91       	pop	r18
     7d0:	0f 90       	pop	r0
     7d2:	0f be       	out	0x3f, r0	; 63
     7d4:	0f 90       	pop	r0
     7d6:	1f 90       	pop	r1
     7d8:	18 95       	reti

000007da <__vector_6>:
	{
		GPFunc_OCA();
	}
}*/
void __vector_6(void)
{
     7da:	1f 92       	push	r1
     7dc:	0f 92       	push	r0
     7de:	0f b6       	in	r0, 0x3f	; 63
     7e0:	0f 92       	push	r0
     7e2:	11 24       	eor	r1, r1
     7e4:	2f 93       	push	r18
     7e6:	3f 93       	push	r19
     7e8:	4f 93       	push	r20
     7ea:	5f 93       	push	r21
     7ec:	6f 93       	push	r22
     7ee:	7f 93       	push	r23
     7f0:	8f 93       	push	r24
     7f2:	9f 93       	push	r25
     7f4:	af 93       	push	r26
     7f6:	bf 93       	push	r27
     7f8:	ef 93       	push	r30
     7fa:	ff 93       	push	r31
	if(GPFunc_IC!=NULL)
     7fc:	e0 91 91 00 	lds	r30, 0x0091	; 0x800091 <GPFunc_IC>
     800:	f0 91 92 00 	lds	r31, 0x0092	; 0x800092 <GPFunc_IC+0x1>
     804:	30 97       	sbiw	r30, 0x00	; 0
     806:	09 f0       	breq	.+2      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
	{
		GPFunc_IC();
     808:	09 95       	icall
	}
}
     80a:	ff 91       	pop	r31
     80c:	ef 91       	pop	r30
     80e:	bf 91       	pop	r27
     810:	af 91       	pop	r26
     812:	9f 91       	pop	r25
     814:	8f 91       	pop	r24
     816:	7f 91       	pop	r23
     818:	6f 91       	pop	r22
     81a:	5f 91       	pop	r21
     81c:	4f 91       	pop	r20
     81e:	3f 91       	pop	r19
     820:	2f 91       	pop	r18
     822:	0f 90       	pop	r0
     824:	0f be       	out	0x3f, r0	; 63
     826:	0f 90       	pop	r0
     828:	1f 90       	pop	r1
     82a:	18 95       	reti

0000082c <UART_InterruptDisable>:
void UART_SendFloat(float64 Number)
{
	uint8_t Converted_Char[20]={0};
	sprintf(Converted_Char,"%.2lf",Number);
	UART_SendMsg(Converted_Char,sizeof(Converted_Char)/sizeof(Converted_Char[0]));
}
     82c:	81 30       	cpi	r24, 0x01	; 1
     82e:	61 f0       	breq	.+24     	; 0x848 <UART_InterruptDisable+0x1c>
     830:	18 f0       	brcs	.+6      	; 0x838 <UART_InterruptDisable+0xc>
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	29 f0       	breq	.+10     	; 0x840 <UART_InterruptDisable+0x14>
     836:	08 95       	ret
     838:	8a b1       	in	r24, 0x0a	; 10
     83a:	8f 77       	andi	r24, 0x7F	; 127
     83c:	8a b9       	out	0x0a, r24	; 10
     83e:	08 95       	ret
     840:	8a b1       	in	r24, 0x0a	; 10
     842:	8f 7b       	andi	r24, 0xBF	; 191
     844:	8a b9       	out	0x0a, r24	; 10
     846:	08 95       	ret
     848:	8a b1       	in	r24, 0x0a	; 10
     84a:	8f 7d       	andi	r24, 0xDF	; 223
     84c:	8a b9       	out	0x0a, r24	; 10
     84e:	08 95       	ret

00000850 <__vector_13>:
/* Rx Complete Interrupt Handler */
void __vector_13 (void) __attribute__((signal, used));
void __vector_13 (void)
{
     850:	1f 92       	push	r1
     852:	0f 92       	push	r0
     854:	0f b6       	in	r0, 0x3f	; 63
     856:	0f 92       	push	r0
     858:	11 24       	eor	r1, r1
     85a:	8f 93       	push	r24
     85c:	ef 93       	push	r30
     85e:	ff 93       	push	r31
	/* As long as local buffer has size keep copying received messages into it */
	if(Rx_Msg_Length < UART_RX_BUFFER_SIZE)
     860:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <Rx_Msg_Length>
     864:	84 36       	cpi	r24, 0x64	; 100
     866:	60 f4       	brcc	.+24     	; 0x880 <__stack+0x21>
	{
		Rx_Buffer[Rx_Msg_Length] = UDR_Reg;
     868:	e0 91 99 00 	lds	r30, 0x0099	; 0x800099 <Rx_Msg_Length>
     86c:	f0 e0       	ldi	r31, 0x00	; 0
     86e:	8c b1       	in	r24, 0x0c	; 12
     870:	e2 50       	subi	r30, 0x02	; 2
     872:	ff 4f       	sbci	r31, 0xFF	; 255
     874:	80 83       	st	Z, r24
		Rx_Msg_Length++;
     876:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <Rx_Msg_Length>
     87a:	8f 5f       	subi	r24, 0xFF	; 255
     87c:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <Rx_Msg_Length>
	}
	else
	{
		/* Ignore messages */
	}
}
     880:	ff 91       	pop	r31
     882:	ef 91       	pop	r30
     884:	8f 91       	pop	r24
     886:	0f 90       	pop	r0
     888:	0f be       	out	0x3f, r0	; 63
     88a:	0f 90       	pop	r0
     88c:	1f 90       	pop	r1
     88e:	18 95       	reti

00000890 <__vector_14>:
/* Data Register Empty Interrupt Handler */
void __vector_14 (void) __attribute__((signal, used));
void __vector_14 (void)
{
     890:	1f 92       	push	r1
     892:	0f 92       	push	r0
     894:	0f b6       	in	r0, 0x3f	; 63
     896:	0f 92       	push	r0
     898:	11 24       	eor	r1, r1
     89a:	2f 93       	push	r18
     89c:	3f 93       	push	r19
     89e:	4f 93       	push	r20
     8a0:	5f 93       	push	r21
     8a2:	6f 93       	push	r22
     8a4:	7f 93       	push	r23
     8a6:	8f 93       	push	r24
     8a8:	9f 93       	push	r25
     8aa:	af 93       	push	r26
     8ac:	bf 93       	push	r27
     8ae:	ef 93       	push	r30
     8b0:	ff 93       	push	r31
	/* As long as size of message is not reached keep sending */
	if(Tx_Msg_Index < Tx_Msg_Length)
     8b2:	90 91 98 00 	lds	r25, 0x0098	; 0x800098 <Tx_Msg_Index>
     8b6:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <Tx_Msg_Length>
     8ba:	98 17       	cp	r25, r24
     8bc:	68 f4       	brcc	.+26     	; 0x8d8 <__vector_14+0x48>
	{
		UDR_Reg = Tx_Buffer[Tx_Msg_Index];
     8be:	e0 91 98 00 	lds	r30, 0x0098	; 0x800098 <Tx_Msg_Index>
     8c2:	f0 e0       	ldi	r31, 0x00	; 0
     8c4:	e6 56       	subi	r30, 0x66	; 102
     8c6:	ff 4f       	sbci	r31, 0xFF	; 255
     8c8:	80 81       	ld	r24, Z
     8ca:	8c b9       	out	0x0c, r24	; 12
		Tx_Msg_Index++;
     8cc:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <Tx_Msg_Index>
     8d0:	8f 5f       	subi	r24, 0xFF	; 255
     8d2:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <Tx_Msg_Index>
     8d6:	07 c0       	rjmp	.+14     	; 0x8e6 <__vector_14+0x56>
	}
	else
	{
		/* If the whole message has been transmitted reset the counters and disable the interrupt */
		Tx_Msg_Index = 0;
     8d8:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <Tx_Msg_Index>
		Tx_Msg_Length = 0;
     8dc:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <Tx_Msg_Length>
		UART_InterruptDisable(UART_Data_Register_Empty_Int);
     8e0:	81 e0       	ldi	r24, 0x01	; 1
     8e2:	0e 94 16 04 	call	0x82c	; 0x82c <UART_InterruptDisable>
	}
}
     8e6:	ff 91       	pop	r31
     8e8:	ef 91       	pop	r30
     8ea:	bf 91       	pop	r27
     8ec:	af 91       	pop	r26
     8ee:	9f 91       	pop	r25
     8f0:	8f 91       	pop	r24
     8f2:	7f 91       	pop	r23
     8f4:	6f 91       	pop	r22
     8f6:	5f 91       	pop	r21
     8f8:	4f 91       	pop	r20
     8fa:	3f 91       	pop	r19
     8fc:	2f 91       	pop	r18
     8fe:	0f 90       	pop	r0
     900:	0f be       	out	0x3f, r0	; 63
     902:	0f 90       	pop	r0
     904:	1f 90       	pop	r1
     906:	18 95       	reti

00000908 <__vector_15>:
/* Tx Complete Interrupt Handler */
void __vector_15 (void) __attribute__((signal, used));
void __vector_15 (void)
{
     908:	1f 92       	push	r1
     90a:	0f 92       	push	r0
     90c:	0f b6       	in	r0, 0x3f	; 63
     90e:	0f 92       	push	r0
     910:	11 24       	eor	r1, r1

     912:	0f 90       	pop	r0
     914:	0f be       	out	0x3f, r0	; 63
     916:	0f 90       	pop	r0
     918:	1f 90       	pop	r1
     91a:	18 95       	reti

0000091c <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     91c:	cf 93       	push	r28
     91e:	df 93       	push	r29
     920:	ec 01       	movw	r28, r24
                }
            }
        }
    #endif

    vTaskSuspendAll();
     922:	0e 94 39 0b 	call	0x1672	; 0x1672 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
     926:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <pucAlignedHeap.2107>
     92a:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <pucAlignedHeap.2107+0x1>
     92e:	89 2b       	or	r24, r25
     930:	31 f4       	brne	.+12     	; 0x93e <pvPortMalloc+0x22>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
     932:	87 e6       	ldi	r24, 0x67	; 103
     934:	91 e0       	ldi	r25, 0x01	; 1
     936:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <pucAlignedHeap.2107+0x1>
     93a:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <pucAlignedHeap.2107>
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) && /* valid size */
     93e:	20 97       	sbiw	r28, 0x00	; 0
     940:	c9 f0       	breq	.+50     	; 0x974 <pvPortMalloc+0x58>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     942:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <xNextFreeByte>
     946:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <xNextFreeByte+0x1>
     94a:	9e 01       	movw	r18, r28
     94c:	28 0f       	add	r18, r24
     94e:	39 1f       	adc	r19, r25
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) && /* valid size */
     950:	2b 3d       	cpi	r18, 0xDB	; 219
     952:	45 e0       	ldi	r20, 0x05	; 5
     954:	34 07       	cpc	r19, r20
     956:	88 f4       	brcc	.+34     	; 0x97a <pvPortMalloc+0x5e>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     958:	82 17       	cp	r24, r18
     95a:	93 07       	cpc	r25, r19
     95c:	88 f4       	brcc	.+34     	; 0x980 <pvPortMalloc+0x64>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
     95e:	c0 91 62 01 	lds	r28, 0x0162	; 0x800162 <pucAlignedHeap.2107>
     962:	d0 91 63 01 	lds	r29, 0x0163	; 0x800163 <pucAlignedHeap.2107+0x1>
     966:	c8 0f       	add	r28, r24
     968:	d9 1f       	adc	r29, r25
            xNextFreeByte += xWantedSize;
     96a:	30 93 65 01 	sts	0x0165, r19	; 0x800165 <xNextFreeByte+0x1>
     96e:	20 93 64 01 	sts	0x0164, r18	; 0x800164 <xNextFreeByte>
     972:	08 c0       	rjmp	.+16     	; 0x984 <pvPortMalloc+0x68>

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    void * pvReturn = NULL;
     974:	c0 e0       	ldi	r28, 0x00	; 0
     976:	d0 e0       	ldi	r29, 0x00	; 0
     978:	05 c0       	rjmp	.+10     	; 0x984 <pvPortMalloc+0x68>
     97a:	c0 e0       	ldi	r28, 0x00	; 0
     97c:	d0 e0       	ldi	r29, 0x00	; 0
     97e:	02 c0       	rjmp	.+4      	; 0x984 <pvPortMalloc+0x68>
     980:	c0 e0       	ldi	r28, 0x00	; 0
     982:	d0 e0       	ldi	r29, 0x00	; 0
            xNextFreeByte += xWantedSize;
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     984:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <xTaskResumeAll>
            }
        }
    #endif

    return pvReturn;
}
     988:	ce 01       	movw	r24, r28
     98a:	df 91       	pop	r29
     98c:	cf 91       	pop	r28
     98e:	08 95       	ret

00000990 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     990:	08 95       	ret

00000992 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     992:	fc 01       	movw	r30, r24
     994:	03 96       	adiw	r24, 0x03	; 3
     996:	92 83       	std	Z+2, r25	; 0x02
     998:	81 83       	std	Z+1, r24	; 0x01
     99a:	2f ef       	ldi	r18, 0xFF	; 255
     99c:	3f ef       	ldi	r19, 0xFF	; 255
     99e:	34 83       	std	Z+4, r19	; 0x04
     9a0:	23 83       	std	Z+3, r18	; 0x03
     9a2:	96 83       	std	Z+6, r25	; 0x06
     9a4:	85 83       	std	Z+5, r24	; 0x05
     9a6:	90 87       	std	Z+8, r25	; 0x08
     9a8:	87 83       	std	Z+7, r24	; 0x07
     9aa:	10 82       	st	Z, r1
     9ac:	08 95       	ret

000009ae <vListInitialiseItem>:
     9ae:	fc 01       	movw	r30, r24
     9b0:	11 86       	std	Z+9, r1	; 0x09
     9b2:	10 86       	std	Z+8, r1	; 0x08
     9b4:	08 95       	ret

000009b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     9b6:	cf 93       	push	r28
     9b8:	df 93       	push	r29
     9ba:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     9bc:	48 81       	ld	r20, Y
     9be:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     9c0:	4f 3f       	cpi	r20, 0xFF	; 255
     9c2:	2f ef       	ldi	r18, 0xFF	; 255
     9c4:	52 07       	cpc	r21, r18
     9c6:	21 f4       	brne	.+8      	; 0x9d0 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     9c8:	fc 01       	movw	r30, r24
     9ca:	a7 81       	ldd	r26, Z+7	; 0x07
     9cc:	b0 85       	ldd	r27, Z+8	; 0x08
     9ce:	0d c0       	rjmp	.+26     	; 0x9ea <vListInsert+0x34>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     9d0:	dc 01       	movw	r26, r24
     9d2:	13 96       	adiw	r26, 0x03	; 3
     9d4:	01 c0       	rjmp	.+2      	; 0x9d8 <vListInsert+0x22>
     9d6:	df 01       	movw	r26, r30
     9d8:	12 96       	adiw	r26, 0x02	; 2
     9da:	ed 91       	ld	r30, X+
     9dc:	fc 91       	ld	r31, X
     9de:	13 97       	sbiw	r26, 0x03	; 3
     9e0:	20 81       	ld	r18, Z
     9e2:	31 81       	ldd	r19, Z+1	; 0x01
     9e4:	42 17       	cp	r20, r18
     9e6:	53 07       	cpc	r21, r19
     9e8:	b0 f7       	brcc	.-20     	; 0x9d6 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     9ea:	12 96       	adiw	r26, 0x02	; 2
     9ec:	ed 91       	ld	r30, X+
     9ee:	fc 91       	ld	r31, X
     9f0:	13 97       	sbiw	r26, 0x03	; 3
     9f2:	fb 83       	std	Y+3, r31	; 0x03
     9f4:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     9f6:	d5 83       	std	Z+5, r29	; 0x05
     9f8:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     9fa:	bd 83       	std	Y+5, r27	; 0x05
     9fc:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     9fe:	13 96       	adiw	r26, 0x03	; 3
     a00:	dc 93       	st	X, r29
     a02:	ce 93       	st	-X, r28
     a04:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     a06:	99 87       	std	Y+9, r25	; 0x09
     a08:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     a0a:	fc 01       	movw	r30, r24
     a0c:	20 81       	ld	r18, Z
     a0e:	2f 5f       	subi	r18, 0xFF	; 255
     a10:	20 83       	st	Z, r18
}
     a12:	df 91       	pop	r29
     a14:	cf 91       	pop	r28
     a16:	08 95       	ret

00000a18 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     a18:	cf 93       	push	r28
     a1a:	df 93       	push	r29
     a1c:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     a1e:	a0 85       	ldd	r26, Z+8	; 0x08
     a20:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     a22:	c2 81       	ldd	r28, Z+2	; 0x02
     a24:	d3 81       	ldd	r29, Z+3	; 0x03
     a26:	84 81       	ldd	r24, Z+4	; 0x04
     a28:	95 81       	ldd	r25, Z+5	; 0x05
     a2a:	9d 83       	std	Y+5, r25	; 0x05
     a2c:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     a2e:	c4 81       	ldd	r28, Z+4	; 0x04
     a30:	d5 81       	ldd	r29, Z+5	; 0x05
     a32:	82 81       	ldd	r24, Z+2	; 0x02
     a34:	93 81       	ldd	r25, Z+3	; 0x03
     a36:	9b 83       	std	Y+3, r25	; 0x03
     a38:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     a3a:	11 96       	adiw	r26, 0x01	; 1
     a3c:	8d 91       	ld	r24, X+
     a3e:	9c 91       	ld	r25, X
     a40:	12 97       	sbiw	r26, 0x02	; 2
     a42:	e8 17       	cp	r30, r24
     a44:	f9 07       	cpc	r31, r25
     a46:	31 f4       	brne	.+12     	; 0xa54 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     a48:	84 81       	ldd	r24, Z+4	; 0x04
     a4a:	95 81       	ldd	r25, Z+5	; 0x05
     a4c:	12 96       	adiw	r26, 0x02	; 2
     a4e:	9c 93       	st	X, r25
     a50:	8e 93       	st	-X, r24
     a52:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     a54:	11 86       	std	Z+9, r1	; 0x09
     a56:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     a58:	8c 91       	ld	r24, X
     a5a:	81 50       	subi	r24, 0x01	; 1
     a5c:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     a5e:	8c 91       	ld	r24, X
}
     a60:	df 91       	pop	r29
     a62:	cf 91       	pop	r28
     a64:	08 95       	ret

00000a66 <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     a66:	1b bc       	out	0x2b, r1	; 43
     a68:	8b e0       	ldi	r24, 0x0B	; 11
     a6a:	8a bd       	out	0x2a, r24	; 42
     a6c:	8e bd       	out	0x2e, r24	; 46
     a6e:	89 b7       	in	r24, 0x39	; 57
     a70:	80 61       	ori	r24, 0x10	; 16
     a72:	89 bf       	out	0x39, r24	; 57
     a74:	08 95       	ret

00000a76 <pxPortInitialiseStack>:
     a76:	31 e1       	ldi	r19, 0x11	; 17
     a78:	fc 01       	movw	r30, r24
     a7a:	30 83       	st	Z, r19
     a7c:	31 97       	sbiw	r30, 0x01	; 1
     a7e:	22 e2       	ldi	r18, 0x22	; 34
     a80:	20 83       	st	Z, r18
     a82:	31 97       	sbiw	r30, 0x01	; 1
     a84:	a3 e3       	ldi	r26, 0x33	; 51
     a86:	a0 83       	st	Z, r26
     a88:	31 97       	sbiw	r30, 0x01	; 1
     a8a:	60 83       	st	Z, r22
     a8c:	31 97       	sbiw	r30, 0x01	; 1
     a8e:	70 83       	st	Z, r23
     a90:	31 97       	sbiw	r30, 0x01	; 1
     a92:	10 82       	st	Z, r1
     a94:	31 97       	sbiw	r30, 0x01	; 1
     a96:	60 e8       	ldi	r22, 0x80	; 128
     a98:	60 83       	st	Z, r22
     a9a:	31 97       	sbiw	r30, 0x01	; 1
     a9c:	10 82       	st	Z, r1
     a9e:	31 97       	sbiw	r30, 0x01	; 1
     aa0:	62 e0       	ldi	r22, 0x02	; 2
     aa2:	60 83       	st	Z, r22
     aa4:	31 97       	sbiw	r30, 0x01	; 1
     aa6:	63 e0       	ldi	r22, 0x03	; 3
     aa8:	60 83       	st	Z, r22
     aaa:	31 97       	sbiw	r30, 0x01	; 1
     aac:	64 e0       	ldi	r22, 0x04	; 4
     aae:	60 83       	st	Z, r22
     ab0:	31 97       	sbiw	r30, 0x01	; 1
     ab2:	65 e0       	ldi	r22, 0x05	; 5
     ab4:	60 83       	st	Z, r22
     ab6:	31 97       	sbiw	r30, 0x01	; 1
     ab8:	66 e0       	ldi	r22, 0x06	; 6
     aba:	60 83       	st	Z, r22
     abc:	31 97       	sbiw	r30, 0x01	; 1
     abe:	67 e0       	ldi	r22, 0x07	; 7
     ac0:	60 83       	st	Z, r22
     ac2:	31 97       	sbiw	r30, 0x01	; 1
     ac4:	68 e0       	ldi	r22, 0x08	; 8
     ac6:	60 83       	st	Z, r22
     ac8:	31 97       	sbiw	r30, 0x01	; 1
     aca:	69 e0       	ldi	r22, 0x09	; 9
     acc:	60 83       	st	Z, r22
     ace:	31 97       	sbiw	r30, 0x01	; 1
     ad0:	60 e1       	ldi	r22, 0x10	; 16
     ad2:	60 83       	st	Z, r22
     ad4:	31 97       	sbiw	r30, 0x01	; 1
     ad6:	30 83       	st	Z, r19
     ad8:	31 97       	sbiw	r30, 0x01	; 1
     ada:	32 e1       	ldi	r19, 0x12	; 18
     adc:	30 83       	st	Z, r19
     ade:	31 97       	sbiw	r30, 0x01	; 1
     ae0:	33 e1       	ldi	r19, 0x13	; 19
     ae2:	30 83       	st	Z, r19
     ae4:	31 97       	sbiw	r30, 0x01	; 1
     ae6:	34 e1       	ldi	r19, 0x14	; 20
     ae8:	30 83       	st	Z, r19
     aea:	31 97       	sbiw	r30, 0x01	; 1
     aec:	35 e1       	ldi	r19, 0x15	; 21
     aee:	30 83       	st	Z, r19
     af0:	31 97       	sbiw	r30, 0x01	; 1
     af2:	36 e1       	ldi	r19, 0x16	; 22
     af4:	30 83       	st	Z, r19
     af6:	31 97       	sbiw	r30, 0x01	; 1
     af8:	37 e1       	ldi	r19, 0x17	; 23
     afa:	30 83       	st	Z, r19
     afc:	31 97       	sbiw	r30, 0x01	; 1
     afe:	38 e1       	ldi	r19, 0x18	; 24
     b00:	30 83       	st	Z, r19
     b02:	31 97       	sbiw	r30, 0x01	; 1
     b04:	39 e1       	ldi	r19, 0x19	; 25
     b06:	30 83       	st	Z, r19
     b08:	31 97       	sbiw	r30, 0x01	; 1
     b0a:	30 e2       	ldi	r19, 0x20	; 32
     b0c:	30 83       	st	Z, r19
     b0e:	31 97       	sbiw	r30, 0x01	; 1
     b10:	31 e2       	ldi	r19, 0x21	; 33
     b12:	30 83       	st	Z, r19
     b14:	31 97       	sbiw	r30, 0x01	; 1
     b16:	20 83       	st	Z, r18
     b18:	31 97       	sbiw	r30, 0x01	; 1
     b1a:	23 e2       	ldi	r18, 0x23	; 35
     b1c:	20 83       	st	Z, r18
     b1e:	31 97       	sbiw	r30, 0x01	; 1
     b20:	40 83       	st	Z, r20
     b22:	31 97       	sbiw	r30, 0x01	; 1
     b24:	50 83       	st	Z, r21
     b26:	31 97       	sbiw	r30, 0x01	; 1
     b28:	26 e2       	ldi	r18, 0x26	; 38
     b2a:	20 83       	st	Z, r18
     b2c:	31 97       	sbiw	r30, 0x01	; 1
     b2e:	27 e2       	ldi	r18, 0x27	; 39
     b30:	20 83       	st	Z, r18
     b32:	31 97       	sbiw	r30, 0x01	; 1
     b34:	28 e2       	ldi	r18, 0x28	; 40
     b36:	20 83       	st	Z, r18
     b38:	31 97       	sbiw	r30, 0x01	; 1
     b3a:	29 e2       	ldi	r18, 0x29	; 41
     b3c:	20 83       	st	Z, r18
     b3e:	31 97       	sbiw	r30, 0x01	; 1
     b40:	20 e3       	ldi	r18, 0x30	; 48
     b42:	20 83       	st	Z, r18
     b44:	31 97       	sbiw	r30, 0x01	; 1
     b46:	21 e3       	ldi	r18, 0x31	; 49
     b48:	20 83       	st	Z, r18
     b4a:	86 97       	sbiw	r24, 0x26	; 38
     b4c:	08 95       	ret

00000b4e <xPortStartScheduler>:
     b4e:	0e 94 33 05 	call	0xa66	; 0xa66 <prvSetupTimerInterrupt>
     b52:	a0 91 9e 07 	lds	r26, 0x079E	; 0x80079e <pxCurrentTCB>
     b56:	b0 91 9f 07 	lds	r27, 0x079F	; 0x80079f <pxCurrentTCB+0x1>
     b5a:	cd 91       	ld	r28, X+
     b5c:	cd bf       	out	0x3d, r28	; 61
     b5e:	dd 91       	ld	r29, X+
     b60:	de bf       	out	0x3e, r29	; 62
     b62:	ff 91       	pop	r31
     b64:	ef 91       	pop	r30
     b66:	df 91       	pop	r29
     b68:	cf 91       	pop	r28
     b6a:	bf 91       	pop	r27
     b6c:	af 91       	pop	r26
     b6e:	9f 91       	pop	r25
     b70:	8f 91       	pop	r24
     b72:	7f 91       	pop	r23
     b74:	6f 91       	pop	r22
     b76:	5f 91       	pop	r21
     b78:	4f 91       	pop	r20
     b7a:	3f 91       	pop	r19
     b7c:	2f 91       	pop	r18
     b7e:	1f 91       	pop	r17
     b80:	0f 91       	pop	r16
     b82:	ff 90       	pop	r15
     b84:	ef 90       	pop	r14
     b86:	df 90       	pop	r13
     b88:	cf 90       	pop	r12
     b8a:	bf 90       	pop	r11
     b8c:	af 90       	pop	r10
     b8e:	9f 90       	pop	r9
     b90:	8f 90       	pop	r8
     b92:	7f 90       	pop	r7
     b94:	6f 90       	pop	r6
     b96:	5f 90       	pop	r5
     b98:	4f 90       	pop	r4
     b9a:	3f 90       	pop	r3
     b9c:	2f 90       	pop	r2
     b9e:	1f 90       	pop	r1
     ba0:	0f 90       	pop	r0
     ba2:	0f be       	out	0x3f, r0	; 63
     ba4:	0f 90       	pop	r0
     ba6:	08 95       	ret
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	08 95       	ret

00000bac <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     bac:	0f 92       	push	r0
     bae:	0f b6       	in	r0, 0x3f	; 63
     bb0:	f8 94       	cli
     bb2:	0f 92       	push	r0
     bb4:	1f 92       	push	r1
     bb6:	11 24       	eor	r1, r1
     bb8:	2f 92       	push	r2
     bba:	3f 92       	push	r3
     bbc:	4f 92       	push	r4
     bbe:	5f 92       	push	r5
     bc0:	6f 92       	push	r6
     bc2:	7f 92       	push	r7
     bc4:	8f 92       	push	r8
     bc6:	9f 92       	push	r9
     bc8:	af 92       	push	r10
     bca:	bf 92       	push	r11
     bcc:	cf 92       	push	r12
     bce:	df 92       	push	r13
     bd0:	ef 92       	push	r14
     bd2:	ff 92       	push	r15
     bd4:	0f 93       	push	r16
     bd6:	1f 93       	push	r17
     bd8:	2f 93       	push	r18
     bda:	3f 93       	push	r19
     bdc:	4f 93       	push	r20
     bde:	5f 93       	push	r21
     be0:	6f 93       	push	r22
     be2:	7f 93       	push	r23
     be4:	8f 93       	push	r24
     be6:	9f 93       	push	r25
     be8:	af 93       	push	r26
     bea:	bf 93       	push	r27
     bec:	cf 93       	push	r28
     bee:	df 93       	push	r29
     bf0:	ef 93       	push	r30
     bf2:	ff 93       	push	r31
     bf4:	a0 91 9e 07 	lds	r26, 0x079E	; 0x80079e <pxCurrentTCB>
     bf8:	b0 91 9f 07 	lds	r27, 0x079F	; 0x80079f <pxCurrentTCB+0x1>
     bfc:	0d b6       	in	r0, 0x3d	; 61
     bfe:	0d 92       	st	X+, r0
     c00:	0e b6       	in	r0, 0x3e	; 62
     c02:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     c04:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     c08:	a0 91 9e 07 	lds	r26, 0x079E	; 0x80079e <pxCurrentTCB>
     c0c:	b0 91 9f 07 	lds	r27, 0x079F	; 0x80079f <pxCurrentTCB+0x1>
     c10:	cd 91       	ld	r28, X+
     c12:	cd bf       	out	0x3d, r28	; 61
     c14:	dd 91       	ld	r29, X+
     c16:	de bf       	out	0x3e, r29	; 62
     c18:	ff 91       	pop	r31
     c1a:	ef 91       	pop	r30
     c1c:	df 91       	pop	r29
     c1e:	cf 91       	pop	r28
     c20:	bf 91       	pop	r27
     c22:	af 91       	pop	r26
     c24:	9f 91       	pop	r25
     c26:	8f 91       	pop	r24
     c28:	7f 91       	pop	r23
     c2a:	6f 91       	pop	r22
     c2c:	5f 91       	pop	r21
     c2e:	4f 91       	pop	r20
     c30:	3f 91       	pop	r19
     c32:	2f 91       	pop	r18
     c34:	1f 91       	pop	r17
     c36:	0f 91       	pop	r16
     c38:	ff 90       	pop	r15
     c3a:	ef 90       	pop	r14
     c3c:	df 90       	pop	r13
     c3e:	cf 90       	pop	r12
     c40:	bf 90       	pop	r11
     c42:	af 90       	pop	r10
     c44:	9f 90       	pop	r9
     c46:	8f 90       	pop	r8
     c48:	7f 90       	pop	r7
     c4a:	6f 90       	pop	r6
     c4c:	5f 90       	pop	r5
     c4e:	4f 90       	pop	r4
     c50:	3f 90       	pop	r3
     c52:	2f 90       	pop	r2
     c54:	1f 90       	pop	r1
     c56:	0f 90       	pop	r0
     c58:	0f be       	out	0x3f, r0	; 63
     c5a:	0f 90       	pop	r0

	asm volatile ( "ret" );
     c5c:	08 95       	ret

00000c5e <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     c5e:	0f 92       	push	r0
     c60:	0f b6       	in	r0, 0x3f	; 63
     c62:	f8 94       	cli
     c64:	0f 92       	push	r0
     c66:	1f 92       	push	r1
     c68:	11 24       	eor	r1, r1
     c6a:	2f 92       	push	r2
     c6c:	3f 92       	push	r3
     c6e:	4f 92       	push	r4
     c70:	5f 92       	push	r5
     c72:	6f 92       	push	r6
     c74:	7f 92       	push	r7
     c76:	8f 92       	push	r8
     c78:	9f 92       	push	r9
     c7a:	af 92       	push	r10
     c7c:	bf 92       	push	r11
     c7e:	cf 92       	push	r12
     c80:	df 92       	push	r13
     c82:	ef 92       	push	r14
     c84:	ff 92       	push	r15
     c86:	0f 93       	push	r16
     c88:	1f 93       	push	r17
     c8a:	2f 93       	push	r18
     c8c:	3f 93       	push	r19
     c8e:	4f 93       	push	r20
     c90:	5f 93       	push	r21
     c92:	6f 93       	push	r22
     c94:	7f 93       	push	r23
     c96:	8f 93       	push	r24
     c98:	9f 93       	push	r25
     c9a:	af 93       	push	r26
     c9c:	bf 93       	push	r27
     c9e:	cf 93       	push	r28
     ca0:	df 93       	push	r29
     ca2:	ef 93       	push	r30
     ca4:	ff 93       	push	r31
     ca6:	a0 91 9e 07 	lds	r26, 0x079E	; 0x80079e <pxCurrentTCB>
     caa:	b0 91 9f 07 	lds	r27, 0x079F	; 0x80079f <pxCurrentTCB+0x1>
     cae:	0d b6       	in	r0, 0x3d	; 61
     cb0:	0d 92       	st	X+, r0
     cb2:	0e b6       	in	r0, 0x3e	; 62
     cb4:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     cb6:	0e 94 3f 0b 	call	0x167e	; 0x167e <xTaskIncrementTick>
     cba:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     cbc:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     cc0:	a0 91 9e 07 	lds	r26, 0x079E	; 0x80079e <pxCurrentTCB>
     cc4:	b0 91 9f 07 	lds	r27, 0x079F	; 0x80079f <pxCurrentTCB+0x1>
     cc8:	cd 91       	ld	r28, X+
     cca:	cd bf       	out	0x3d, r28	; 61
     ccc:	dd 91       	ld	r29, X+
     cce:	de bf       	out	0x3e, r29	; 62
     cd0:	ff 91       	pop	r31
     cd2:	ef 91       	pop	r30
     cd4:	df 91       	pop	r29
     cd6:	cf 91       	pop	r28
     cd8:	bf 91       	pop	r27
     cda:	af 91       	pop	r26
     cdc:	9f 91       	pop	r25
     cde:	8f 91       	pop	r24
     ce0:	7f 91       	pop	r23
     ce2:	6f 91       	pop	r22
     ce4:	5f 91       	pop	r21
     ce6:	4f 91       	pop	r20
     ce8:	3f 91       	pop	r19
     cea:	2f 91       	pop	r18
     cec:	1f 91       	pop	r17
     cee:	0f 91       	pop	r16
     cf0:	ff 90       	pop	r15
     cf2:	ef 90       	pop	r14
     cf4:	df 90       	pop	r13
     cf6:	cf 90       	pop	r12
     cf8:	bf 90       	pop	r11
     cfa:	af 90       	pop	r10
     cfc:	9f 90       	pop	r9
     cfe:	8f 90       	pop	r8
     d00:	7f 90       	pop	r7
     d02:	6f 90       	pop	r6
     d04:	5f 90       	pop	r5
     d06:	4f 90       	pop	r4
     d08:	3f 90       	pop	r3
     d0a:	2f 90       	pop	r2
     d0c:	1f 90       	pop	r1
     d0e:	0f 90       	pop	r0
     d10:	0f be       	out	0x3f, r0	; 63
     d12:	0f 90       	pop	r0

	asm volatile ( "ret" );
     d14:	08 95       	ret

00000d16 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     d16:	0e 94 2f 06 	call	0xc5e	; 0xc5e <vPortYieldFromTick>
		asm volatile ( "reti" );
     d1a:	18 95       	reti

00000d1c <prvIsQueueEmpty>:
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
     d1c:	0f b6       	in	r0, 0x3f	; 63
     d1e:	f8 94       	cli
     d20:	0f 92       	push	r0
     d22:	fc 01       	movw	r30, r24
     d24:	82 8d       	ldd	r24, Z+26	; 0x1a
     d26:	81 11       	cpse	r24, r1
     d28:	02 c0       	rjmp	.+4      	; 0xd2e <prvIsQueueEmpty+0x12>
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	01 c0       	rjmp	.+2      	; 0xd30 <prvIsQueueEmpty+0x14>
     d2e:	80 e0       	ldi	r24, 0x00	; 0
     d30:	0f 90       	pop	r0
     d32:	0f be       	out	0x3f, r0	; 63
     d34:	08 95       	ret

00000d36 <prvIsQueueFull>:
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	f8 94       	cli
     d3a:	0f 92       	push	r0
     d3c:	fc 01       	movw	r30, r24
     d3e:	22 8d       	ldd	r18, Z+26	; 0x1a
     d40:	83 8d       	ldd	r24, Z+27	; 0x1b
     d42:	28 13       	cpse	r18, r24
     d44:	02 c0       	rjmp	.+4      	; 0xd4a <prvIsQueueFull+0x14>
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	01 c0       	rjmp	.+2      	; 0xd4c <prvIsQueueFull+0x16>
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	0f 90       	pop	r0
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	08 95       	ret

00000d52 <prvCopyDataToQueue>:
     d52:	0f 93       	push	r16
     d54:	1f 93       	push	r17
     d56:	cf 93       	push	r28
     d58:	df 93       	push	r29
     d5a:	ec 01       	movw	r28, r24
     d5c:	04 2f       	mov	r16, r20
     d5e:	1a 8d       	ldd	r17, Y+26	; 0x1a
     d60:	4c 8d       	ldd	r20, Y+28	; 0x1c
     d62:	44 23       	and	r20, r20
     d64:	b9 f1       	breq	.+110    	; 0xdd4 <prvCopyDataToQueue+0x82>
     d66:	01 11       	cpse	r16, r1
     d68:	16 c0       	rjmp	.+44     	; 0xd96 <prvCopyDataToQueue+0x44>
     d6a:	50 e0       	ldi	r21, 0x00	; 0
     d6c:	8a 81       	ldd	r24, Y+2	; 0x02
     d6e:	9b 81       	ldd	r25, Y+3	; 0x03
     d70:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <memcpy>
     d74:	2c 8d       	ldd	r18, Y+28	; 0x1c
     d76:	8a 81       	ldd	r24, Y+2	; 0x02
     d78:	9b 81       	ldd	r25, Y+3	; 0x03
     d7a:	82 0f       	add	r24, r18
     d7c:	91 1d       	adc	r25, r1
     d7e:	9b 83       	std	Y+3, r25	; 0x03
     d80:	8a 83       	std	Y+2, r24	; 0x02
     d82:	2c 81       	ldd	r18, Y+4	; 0x04
     d84:	3d 81       	ldd	r19, Y+5	; 0x05
     d86:	82 17       	cp	r24, r18
     d88:	93 07       	cpc	r25, r19
     d8a:	20 f1       	brcs	.+72     	; 0xdd4 <prvCopyDataToQueue+0x82>
     d8c:	88 81       	ld	r24, Y
     d8e:	99 81       	ldd	r25, Y+1	; 0x01
     d90:	9b 83       	std	Y+3, r25	; 0x03
     d92:	8a 83       	std	Y+2, r24	; 0x02
     d94:	1f c0       	rjmp	.+62     	; 0xdd4 <prvCopyDataToQueue+0x82>
     d96:	50 e0       	ldi	r21, 0x00	; 0
     d98:	8e 81       	ldd	r24, Y+6	; 0x06
     d9a:	9f 81       	ldd	r25, Y+7	; 0x07
     d9c:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <memcpy>
     da0:	8c 8d       	ldd	r24, Y+28	; 0x1c
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	91 95       	neg	r25
     da6:	81 95       	neg	r24
     da8:	91 09       	sbc	r25, r1
     daa:	2e 81       	ldd	r18, Y+6	; 0x06
     dac:	3f 81       	ldd	r19, Y+7	; 0x07
     dae:	28 0f       	add	r18, r24
     db0:	39 1f       	adc	r19, r25
     db2:	3f 83       	std	Y+7, r19	; 0x07
     db4:	2e 83       	std	Y+6, r18	; 0x06
     db6:	48 81       	ld	r20, Y
     db8:	59 81       	ldd	r21, Y+1	; 0x01
     dba:	24 17       	cp	r18, r20
     dbc:	35 07       	cpc	r19, r21
     dbe:	30 f4       	brcc	.+12     	; 0xdcc <prvCopyDataToQueue+0x7a>
     dc0:	2c 81       	ldd	r18, Y+4	; 0x04
     dc2:	3d 81       	ldd	r19, Y+5	; 0x05
     dc4:	82 0f       	add	r24, r18
     dc6:	93 1f       	adc	r25, r19
     dc8:	9f 83       	std	Y+7, r25	; 0x07
     dca:	8e 83       	std	Y+6, r24	; 0x06
     dcc:	02 30       	cpi	r16, 0x02	; 2
     dce:	11 f4       	brne	.+4      	; 0xdd4 <prvCopyDataToQueue+0x82>
     dd0:	11 11       	cpse	r17, r1
     dd2:	11 50       	subi	r17, 0x01	; 1
     dd4:	1f 5f       	subi	r17, 0xFF	; 255
     dd6:	1a 8f       	std	Y+26, r17	; 0x1a
     dd8:	80 e0       	ldi	r24, 0x00	; 0
     dda:	df 91       	pop	r29
     ddc:	cf 91       	pop	r28
     dde:	1f 91       	pop	r17
     de0:	0f 91       	pop	r16
     de2:	08 95       	ret

00000de4 <prvUnlockQueue>:
     de4:	1f 93       	push	r17
     de6:	cf 93       	push	r28
     de8:	df 93       	push	r29
     dea:	ec 01       	movw	r28, r24
     dec:	0f b6       	in	r0, 0x3f	; 63
     dee:	f8 94       	cli
     df0:	0f 92       	push	r0
     df2:	1e 8d       	ldd	r17, Y+30	; 0x1e
     df4:	0b c0       	rjmp	.+22     	; 0xe0c <prvUnlockQueue+0x28>
     df6:	89 89       	ldd	r24, Y+17	; 0x11
     df8:	88 23       	and	r24, r24
     dfa:	51 f0       	breq	.+20     	; 0xe10 <prvUnlockQueue+0x2c>
     dfc:	ce 01       	movw	r24, r28
     dfe:	41 96       	adiw	r24, 0x11	; 17
     e00:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <xTaskRemoveFromEventList>
     e04:	81 11       	cpse	r24, r1
     e06:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <vTaskMissedYield>
     e0a:	11 50       	subi	r17, 0x01	; 1
     e0c:	11 16       	cp	r1, r17
     e0e:	9c f3       	brlt	.-26     	; 0xdf6 <prvUnlockQueue+0x12>
     e10:	8f ef       	ldi	r24, 0xFF	; 255
     e12:	8e 8f       	std	Y+30, r24	; 0x1e
     e14:	0f 90       	pop	r0
     e16:	0f be       	out	0x3f, r0	; 63
     e18:	0f b6       	in	r0, 0x3f	; 63
     e1a:	f8 94       	cli
     e1c:	0f 92       	push	r0
     e1e:	1d 8d       	ldd	r17, Y+29	; 0x1d
     e20:	0b c0       	rjmp	.+22     	; 0xe38 <prvUnlockQueue+0x54>
     e22:	88 85       	ldd	r24, Y+8	; 0x08
     e24:	88 23       	and	r24, r24
     e26:	51 f0       	breq	.+20     	; 0xe3c <prvUnlockQueue+0x58>
     e28:	ce 01       	movw	r24, r28
     e2a:	08 96       	adiw	r24, 0x08	; 8
     e2c:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <xTaskRemoveFromEventList>
     e30:	81 11       	cpse	r24, r1
     e32:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <vTaskMissedYield>
     e36:	11 50       	subi	r17, 0x01	; 1
     e38:	11 16       	cp	r1, r17
     e3a:	9c f3       	brlt	.-26     	; 0xe22 <prvUnlockQueue+0x3e>
     e3c:	8f ef       	ldi	r24, 0xFF	; 255
     e3e:	8d 8f       	std	Y+29, r24	; 0x1d
     e40:	0f 90       	pop	r0
     e42:	0f be       	out	0x3f, r0	; 63
     e44:	df 91       	pop	r29
     e46:	cf 91       	pop	r28
     e48:	1f 91       	pop	r17
     e4a:	08 95       	ret

00000e4c <xQueueGenericReset>:
     e4c:	0f 93       	push	r16
     e4e:	1f 93       	push	r17
     e50:	cf 93       	push	r28
     e52:	df 93       	push	r29
     e54:	fc 01       	movw	r30, r24
     e56:	36 2f       	mov	r19, r22
     e58:	89 2b       	or	r24, r25
     e5a:	09 f4       	brne	.+2      	; 0xe5e <xQueueGenericReset+0x12>
     e5c:	4d c0       	rjmp	.+154    	; 0xef8 <xQueueGenericReset+0xac>
     e5e:	23 8d       	ldd	r18, Z+27	; 0x1b
     e60:	22 23       	and	r18, r18
     e62:	09 f4       	brne	.+2      	; 0xe66 <xQueueGenericReset+0x1a>
     e64:	4b c0       	rjmp	.+150    	; 0xefc <xQueueGenericReset+0xb0>
     e66:	02 2f       	mov	r16, r18
     e68:	10 e0       	ldi	r17, 0x00	; 0
     e6a:	8f ef       	ldi	r24, 0xFF	; 255
     e6c:	9f ef       	ldi	r25, 0xFF	; 255
     e6e:	b8 01       	movw	r22, r16
     e70:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <__udivmodhi4>
     e74:	44 8d       	ldd	r20, Z+28	; 0x1c
     e76:	84 2f       	mov	r24, r20
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	68 17       	cp	r22, r24
     e7c:	79 07       	cpc	r23, r25
     e7e:	08 f4       	brcc	.+2      	; 0xe82 <xQueueGenericReset+0x36>
     e80:	3f c0       	rjmp	.+126    	; 0xf00 <xQueueGenericReset+0xb4>
     e82:	ef 01       	movw	r28, r30
     e84:	0f b6       	in	r0, 0x3f	; 63
     e86:	f8 94       	cli
     e88:	0f 92       	push	r0
     e8a:	60 81       	ld	r22, Z
     e8c:	71 81       	ldd	r23, Z+1	; 0x01
     e8e:	fb 01       	movw	r30, r22
     e90:	24 9f       	mul	r18, r20
     e92:	e0 0d       	add	r30, r0
     e94:	f1 1d       	adc	r31, r1
     e96:	11 24       	eor	r1, r1
     e98:	fd 83       	std	Y+5, r31	; 0x05
     e9a:	ec 83       	std	Y+4, r30	; 0x04
     e9c:	1a 8e       	std	Y+26, r1	; 0x1a
     e9e:	7b 83       	std	Y+3, r23	; 0x03
     ea0:	6a 83       	std	Y+2, r22	; 0x02
     ea2:	01 50       	subi	r16, 0x01	; 1
     ea4:	11 09       	sbc	r17, r1
     ea6:	80 9f       	mul	r24, r16
     ea8:	a0 01       	movw	r20, r0
     eaa:	81 9f       	mul	r24, r17
     eac:	50 0d       	add	r21, r0
     eae:	90 9f       	mul	r25, r16
     eb0:	50 0d       	add	r21, r0
     eb2:	11 24       	eor	r1, r1
     eb4:	cb 01       	movw	r24, r22
     eb6:	84 0f       	add	r24, r20
     eb8:	95 1f       	adc	r25, r21
     eba:	9f 83       	std	Y+7, r25	; 0x07
     ebc:	8e 83       	std	Y+6, r24	; 0x06
     ebe:	8f ef       	ldi	r24, 0xFF	; 255
     ec0:	8d 8f       	std	Y+29, r24	; 0x1d
     ec2:	8e 8f       	std	Y+30, r24	; 0x1e
     ec4:	31 11       	cpse	r19, r1
     ec6:	0c c0       	rjmp	.+24     	; 0xee0 <xQueueGenericReset+0x94>
     ec8:	88 85       	ldd	r24, Y+8	; 0x08
     eca:	88 23       	and	r24, r24
     ecc:	89 f0       	breq	.+34     	; 0xef0 <xQueueGenericReset+0xa4>
     ece:	ce 01       	movw	r24, r28
     ed0:	08 96       	adiw	r24, 0x08	; 8
     ed2:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <xTaskRemoveFromEventList>
     ed6:	88 23       	and	r24, r24
     ed8:	59 f0       	breq	.+22     	; 0xef0 <xQueueGenericReset+0xa4>
     eda:	0e 94 d6 05 	call	0xbac	; 0xbac <vPortYield>
     ede:	08 c0       	rjmp	.+16     	; 0xef0 <xQueueGenericReset+0xa4>
     ee0:	ce 01       	movw	r24, r28
     ee2:	08 96       	adiw	r24, 0x08	; 8
     ee4:	0e 94 c9 04 	call	0x992	; 0x992 <vListInitialise>
     ee8:	ce 01       	movw	r24, r28
     eea:	41 96       	adiw	r24, 0x11	; 17
     eec:	0e 94 c9 04 	call	0x992	; 0x992 <vListInitialise>
     ef0:	0f 90       	pop	r0
     ef2:	0f be       	out	0x3f, r0	; 63
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	05 c0       	rjmp	.+10     	; 0xf02 <xQueueGenericReset+0xb6>
     ef8:	80 e0       	ldi	r24, 0x00	; 0
     efa:	03 c0       	rjmp	.+6      	; 0xf02 <xQueueGenericReset+0xb6>
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	01 c0       	rjmp	.+2      	; 0xf02 <xQueueGenericReset+0xb6>
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	df 91       	pop	r29
     f04:	cf 91       	pop	r28
     f06:	1f 91       	pop	r17
     f08:	0f 91       	pop	r16
     f0a:	08 95       	ret

00000f0c <prvInitialiseNewQueue>:
     f0c:	0f 93       	push	r16
     f0e:	1f 93       	push	r17
     f10:	f8 01       	movw	r30, r16
     f12:	61 11       	cpse	r22, r1
     f14:	03 c0       	rjmp	.+6      	; 0xf1c <prvInitialiseNewQueue+0x10>
     f16:	11 83       	std	Z+1, r17	; 0x01
     f18:	00 83       	st	Z, r16
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <prvInitialiseNewQueue+0x14>
     f1c:	51 83       	std	Z+1, r21	; 0x01
     f1e:	40 83       	st	Z, r20
     f20:	83 8f       	std	Z+27, r24	; 0x1b
     f22:	64 8f       	std	Z+28, r22	; 0x1c
     f24:	61 e0       	ldi	r22, 0x01	; 1
     f26:	cf 01       	movw	r24, r30
     f28:	0e 94 26 07 	call	0xe4c	; 0xe4c <xQueueGenericReset>
     f2c:	1f 91       	pop	r17
     f2e:	0f 91       	pop	r16
     f30:	08 95       	ret

00000f32 <xQueueGenericCreate>:
     f32:	df 92       	push	r13
     f34:	ef 92       	push	r14
     f36:	ff 92       	push	r15
     f38:	0f 93       	push	r16
     f3a:	1f 93       	push	r17
     f3c:	cf 93       	push	r28
     f3e:	df 93       	push	r29
     f40:	38 2f       	mov	r19, r24
     f42:	e6 2f       	mov	r30, r22
     f44:	88 23       	and	r24, r24
     f46:	29 f1       	breq	.+74     	; 0xf92 <xQueueGenericCreate+0x60>
     f48:	68 2f       	mov	r22, r24
     f4a:	70 e0       	ldi	r23, 0x00	; 0
     f4c:	8f ef       	ldi	r24, 0xFF	; 255
     f4e:	9f ef       	ldi	r25, 0xFF	; 255
     f50:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <__udivmodhi4>
     f54:	8e 2f       	mov	r24, r30
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	68 17       	cp	r22, r24
     f5a:	79 07       	cpc	r23, r25
     f5c:	e8 f0       	brcs	.+58     	; 0xf98 <xQueueGenericCreate+0x66>
     f5e:	3e 9f       	mul	r19, r30
     f60:	c0 01       	movw	r24, r0
     f62:	11 24       	eor	r1, r1
     f64:	81 3e       	cpi	r24, 0xE1	; 225
     f66:	2f ef       	ldi	r18, 0xFF	; 255
     f68:	92 07       	cpc	r25, r18
     f6a:	c8 f4       	brcc	.+50     	; 0xf9e <xQueueGenericCreate+0x6c>
     f6c:	d4 2e       	mov	r13, r20
     f6e:	de 2f       	mov	r29, r30
     f70:	c3 2f       	mov	r28, r19
     f72:	4f 96       	adiw	r24, 0x1f	; 31
     f74:	0e 94 8e 04 	call	0x91c	; 0x91c <pvPortMalloc>
     f78:	7c 01       	movw	r14, r24
     f7a:	00 97       	sbiw	r24, 0x00	; 0
     f7c:	91 f0       	breq	.+36     	; 0xfa2 <xQueueGenericCreate+0x70>
     f7e:	8c 01       	movw	r16, r24
     f80:	2d 2d       	mov	r18, r13
     f82:	ac 01       	movw	r20, r24
     f84:	41 5e       	subi	r20, 0xE1	; 225
     f86:	5f 4f       	sbci	r21, 0xFF	; 255
     f88:	6d 2f       	mov	r22, r29
     f8a:	8c 2f       	mov	r24, r28
     f8c:	0e 94 86 07 	call	0xf0c	; 0xf0c <prvInitialiseNewQueue>
     f90:	08 c0       	rjmp	.+16     	; 0xfa2 <xQueueGenericCreate+0x70>
     f92:	e1 2c       	mov	r14, r1
     f94:	f1 2c       	mov	r15, r1
     f96:	05 c0       	rjmp	.+10     	; 0xfa2 <xQueueGenericCreate+0x70>
     f98:	e1 2c       	mov	r14, r1
     f9a:	f1 2c       	mov	r15, r1
     f9c:	02 c0       	rjmp	.+4      	; 0xfa2 <xQueueGenericCreate+0x70>
     f9e:	e1 2c       	mov	r14, r1
     fa0:	f1 2c       	mov	r15, r1
     fa2:	c7 01       	movw	r24, r14
     fa4:	df 91       	pop	r29
     fa6:	cf 91       	pop	r28
     fa8:	1f 91       	pop	r17
     faa:	0f 91       	pop	r16
     fac:	ff 90       	pop	r15
     fae:	ef 90       	pop	r14
     fb0:	df 90       	pop	r13
     fb2:	08 95       	ret

00000fb4 <xQueueGenericSend>:
     fb4:	cf 92       	push	r12
     fb6:	df 92       	push	r13
     fb8:	ef 92       	push	r14
     fba:	ff 92       	push	r15
     fbc:	0f 93       	push	r16
     fbe:	1f 93       	push	r17
     fc0:	cf 93       	push	r28
     fc2:	df 93       	push	r29
     fc4:	00 d0       	rcall	.+0      	; 0xfc6 <xQueueGenericSend+0x12>
     fc6:	00 d0       	rcall	.+0      	; 0xfc8 <xQueueGenericSend+0x14>
     fc8:	1f 92       	push	r1
     fca:	cd b7       	in	r28, 0x3d	; 61
     fcc:	de b7       	in	r29, 0x3e	; 62
     fce:	8c 01       	movw	r16, r24
     fd0:	7b 01       	movw	r14, r22
     fd2:	5d 83       	std	Y+5, r21	; 0x05
     fd4:	4c 83       	std	Y+4, r20	; 0x04
     fd6:	c2 2e       	mov	r12, r18
     fd8:	d1 2c       	mov	r13, r1
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	f8 94       	cli
     fde:	0f 92       	push	r0
     fe0:	f8 01       	movw	r30, r16
     fe2:	92 8d       	ldd	r25, Z+26	; 0x1a
     fe4:	83 8d       	ldd	r24, Z+27	; 0x1b
     fe6:	98 17       	cp	r25, r24
     fe8:	18 f0       	brcs	.+6      	; 0xff0 <xQueueGenericSend+0x3c>
     fea:	f2 e0       	ldi	r31, 0x02	; 2
     fec:	cf 12       	cpse	r12, r31
     fee:	19 c0       	rjmp	.+50     	; 0x1022 <xQueueGenericSend+0x6e>
     ff0:	4c 2d       	mov	r20, r12
     ff2:	b7 01       	movw	r22, r14
     ff4:	c8 01       	movw	r24, r16
     ff6:	0e 94 a9 06 	call	0xd52	; 0xd52 <prvCopyDataToQueue>
     ffa:	f8 01       	movw	r30, r16
     ffc:	91 89       	ldd	r25, Z+17	; 0x11
     ffe:	99 23       	and	r25, r25
    1000:	49 f0       	breq	.+18     	; 0x1014 <xQueueGenericSend+0x60>
    1002:	c8 01       	movw	r24, r16
    1004:	41 96       	adiw	r24, 0x11	; 17
    1006:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <xTaskRemoveFromEventList>
    100a:	88 23       	and	r24, r24
    100c:	31 f0       	breq	.+12     	; 0x101a <xQueueGenericSend+0x66>
    100e:	0e 94 d6 05 	call	0xbac	; 0xbac <vPortYield>
    1012:	03 c0       	rjmp	.+6      	; 0x101a <xQueueGenericSend+0x66>
    1014:	81 11       	cpse	r24, r1
    1016:	0e 94 d6 05 	call	0xbac	; 0xbac <vPortYield>
    101a:	0f 90       	pop	r0
    101c:	0f be       	out	0x3f, r0	; 63
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	4d c0       	rjmp	.+154    	; 0x10bc <xQueueGenericSend+0x108>
    1022:	8c 81       	ldd	r24, Y+4	; 0x04
    1024:	9d 81       	ldd	r25, Y+5	; 0x05
    1026:	89 2b       	or	r24, r25
    1028:	21 f4       	brne	.+8      	; 0x1032 <xQueueGenericSend+0x7e>
    102a:	0f 90       	pop	r0
    102c:	0f be       	out	0x3f, r0	; 63
    102e:	80 e0       	ldi	r24, 0x00	; 0
    1030:	45 c0       	rjmp	.+138    	; 0x10bc <xQueueGenericSend+0x108>
    1032:	d1 10       	cpse	r13, r1
    1034:	06 c0       	rjmp	.+12     	; 0x1042 <xQueueGenericSend+0x8e>
    1036:	ce 01       	movw	r24, r28
    1038:	01 96       	adiw	r24, 0x01	; 1
    103a:	0e 94 67 0e 	call	0x1cce	; 0x1cce <vTaskInternalSetTimeOutState>
    103e:	dd 24       	eor	r13, r13
    1040:	d3 94       	inc	r13
    1042:	0f 90       	pop	r0
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	0e 94 39 0b 	call	0x1672	; 0x1672 <vTaskSuspendAll>
    104a:	0f b6       	in	r0, 0x3f	; 63
    104c:	f8 94       	cli
    104e:	0f 92       	push	r0
    1050:	f8 01       	movw	r30, r16
    1052:	85 8d       	ldd	r24, Z+29	; 0x1d
    1054:	8f 3f       	cpi	r24, 0xFF	; 255
    1056:	09 f4       	brne	.+2      	; 0x105a <xQueueGenericSend+0xa6>
    1058:	15 8e       	std	Z+29, r1	; 0x1d
    105a:	f8 01       	movw	r30, r16
    105c:	86 8d       	ldd	r24, Z+30	; 0x1e
    105e:	8f 3f       	cpi	r24, 0xFF	; 255
    1060:	09 f4       	brne	.+2      	; 0x1064 <xQueueGenericSend+0xb0>
    1062:	16 8e       	std	Z+30, r1	; 0x1e
    1064:	0f 90       	pop	r0
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	be 01       	movw	r22, r28
    106a:	6c 5f       	subi	r22, 0xFC	; 252
    106c:	7f 4f       	sbci	r23, 0xFF	; 255
    106e:	ce 01       	movw	r24, r28
    1070:	01 96       	adiw	r24, 0x01	; 1
    1072:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <xTaskCheckForTimeOut>
    1076:	81 11       	cpse	r24, r1
    1078:	1b c0       	rjmp	.+54     	; 0x10b0 <xQueueGenericSend+0xfc>
    107a:	c8 01       	movw	r24, r16
    107c:	0e 94 9b 06 	call	0xd36	; 0xd36 <prvIsQueueFull>
    1080:	88 23       	and	r24, r24
    1082:	81 f0       	breq	.+32     	; 0x10a4 <xQueueGenericSend+0xf0>
    1084:	6c 81       	ldd	r22, Y+4	; 0x04
    1086:	7d 81       	ldd	r23, Y+5	; 0x05
    1088:	c8 01       	movw	r24, r16
    108a:	08 96       	adiw	r24, 0x08	; 8
    108c:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <vTaskPlaceOnEventList>
    1090:	c8 01       	movw	r24, r16
    1092:	0e 94 f2 06 	call	0xde4	; 0xde4 <prvUnlockQueue>
    1096:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <xTaskResumeAll>
    109a:	81 11       	cpse	r24, r1
    109c:	9e cf       	rjmp	.-196    	; 0xfda <xQueueGenericSend+0x26>
    109e:	0e 94 d6 05 	call	0xbac	; 0xbac <vPortYield>
    10a2:	9b cf       	rjmp	.-202    	; 0xfda <xQueueGenericSend+0x26>
    10a4:	c8 01       	movw	r24, r16
    10a6:	0e 94 f2 06 	call	0xde4	; 0xde4 <prvUnlockQueue>
    10aa:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <xTaskResumeAll>
    10ae:	95 cf       	rjmp	.-214    	; 0xfda <xQueueGenericSend+0x26>
    10b0:	c8 01       	movw	r24, r16
    10b2:	0e 94 f2 06 	call	0xde4	; 0xde4 <prvUnlockQueue>
    10b6:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <xTaskResumeAll>
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	0f 90       	pop	r0
    10be:	0f 90       	pop	r0
    10c0:	0f 90       	pop	r0
    10c2:	0f 90       	pop	r0
    10c4:	0f 90       	pop	r0
    10c6:	df 91       	pop	r29
    10c8:	cf 91       	pop	r28
    10ca:	1f 91       	pop	r17
    10cc:	0f 91       	pop	r16
    10ce:	ff 90       	pop	r15
    10d0:	ef 90       	pop	r14
    10d2:	df 90       	pop	r13
    10d4:	cf 90       	pop	r12
    10d6:	08 95       	ret

000010d8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
    10d8:	ff 92       	push	r15
    10da:	0f 93       	push	r16
    10dc:	1f 93       	push	r17
    10de:	cf 93       	push	r28
    10e0:	df 93       	push	r29
    10e2:	00 d0       	rcall	.+0      	; 0x10e4 <xQueueSemaphoreTake+0xc>
    10e4:	00 d0       	rcall	.+0      	; 0x10e6 <xQueueSemaphoreTake+0xe>
    10e6:	1f 92       	push	r1
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62
    10ec:	8c 01       	movw	r16, r24
    10ee:	7d 83       	std	Y+5, r23	; 0x05
    10f0:	6c 83       	std	Y+4, r22	; 0x04
    BaseType_t xEntryTimeSet = pdFALSE;
    10f2:	f1 2c       	mov	r15, r1
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
    10f4:	0f b6       	in	r0, 0x3f	; 63
    10f6:	f8 94       	cli
    10f8:	0f 92       	push	r0
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    10fa:	f8 01       	movw	r30, r16
    10fc:	82 8d       	ldd	r24, Z+26	; 0x1a

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
    10fe:	88 23       	and	r24, r24
    1100:	81 f0       	breq	.+32     	; 0x1122 <xQueueSemaphoreTake+0x4a>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
    1102:	81 50       	subi	r24, 0x01	; 1
    1104:	82 8f       	std	Z+26, r24	; 0x1a
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1106:	80 85       	ldd	r24, Z+8	; 0x08
    1108:	88 23       	and	r24, r24
    110a:	39 f0       	breq	.+14     	; 0x111a <xQueueSemaphoreTake+0x42>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    110c:	c8 01       	movw	r24, r16
    110e:	08 96       	adiw	r24, 0x08	; 8
    1110:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <xTaskRemoveFromEventList>
    1114:	81 11       	cpse	r24, r1
                    {
                        queueYIELD_IF_USING_PREEMPTION();
    1116:	0e 94 d6 05 	call	0xbac	; 0xbac <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
    111a:	0f 90       	pop	r0
    111c:	0f be       	out	0x3f, r0	; 63
                return pdPASS;
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	53 c0       	rjmp	.+166    	; 0x11c8 <xQueueSemaphoreTake+0xf0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
    1122:	8c 81       	ldd	r24, Y+4	; 0x04
    1124:	9d 81       	ldd	r25, Y+5	; 0x05
    1126:	89 2b       	or	r24, r25
    1128:	21 f4       	brne	.+8      	; 0x1132 <xQueueSemaphoreTake+0x5a>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
    112a:	0f 90       	pop	r0
    112c:	0f be       	out	0x3f, r0	; 63
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	4b c0       	rjmp	.+150    	; 0x11c8 <xQueueSemaphoreTake+0xf0>
                }
                else if( xEntryTimeSet == pdFALSE )
    1132:	f1 10       	cpse	r15, r1
    1134:	06 c0       	rjmp	.+12     	; 0x1142 <xQueueSemaphoreTake+0x6a>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
    1136:	ce 01       	movw	r24, r28
    1138:	01 96       	adiw	r24, 0x01	; 1
    113a:	0e 94 67 0e 	call	0x1cce	; 0x1cce <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
    113e:	ff 24       	eor	r15, r15
    1140:	f3 94       	inc	r15
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
    1142:	0f 90       	pop	r0
    1144:	0f be       	out	0x3f, r0	; 63

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
    1146:	0e 94 39 0b 	call	0x1672	; 0x1672 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
    114a:	0f b6       	in	r0, 0x3f	; 63
    114c:	f8 94       	cli
    114e:	0f 92       	push	r0
    1150:	f8 01       	movw	r30, r16
    1152:	85 8d       	ldd	r24, Z+29	; 0x1d
    1154:	8f 3f       	cpi	r24, 0xFF	; 255
    1156:	09 f4       	brne	.+2      	; 0x115a <xQueueSemaphoreTake+0x82>
    1158:	15 8e       	std	Z+29, r1	; 0x1d
    115a:	f8 01       	movw	r30, r16
    115c:	86 8d       	ldd	r24, Z+30	; 0x1e
    115e:	8f 3f       	cpi	r24, 0xFF	; 255
    1160:	09 f4       	brne	.+2      	; 0x1164 <xQueueSemaphoreTake+0x8c>
    1162:	16 8e       	std	Z+30, r1	; 0x1e
    1164:	0f 90       	pop	r0
    1166:	0f be       	out	0x3f, r0	; 63

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1168:	be 01       	movw	r22, r28
    116a:	6c 5f       	subi	r22, 0xFC	; 252
    116c:	7f 4f       	sbci	r23, 0xFF	; 255
    116e:	ce 01       	movw	r24, r28
    1170:	01 96       	adiw	r24, 0x01	; 1
    1172:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <xTaskCheckForTimeOut>
    1176:	81 11       	cpse	r24, r1
    1178:	1b c0       	rjmp	.+54     	; 0x11b0 <xQueueSemaphoreTake+0xd8>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    117a:	c8 01       	movw	r24, r16
    117c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <prvIsQueueEmpty>
    1180:	88 23       	and	r24, r24
    1182:	81 f0       	breq	.+32     	; 0x11a4 <xQueueSemaphoreTake+0xcc>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1184:	6c 81       	ldd	r22, Y+4	; 0x04
    1186:	7d 81       	ldd	r23, Y+5	; 0x05
    1188:	c8 01       	movw	r24, r16
    118a:	41 96       	adiw	r24, 0x11	; 17
    118c:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
    1190:	c8 01       	movw	r24, r16
    1192:	0e 94 f2 06 	call	0xde4	; 0xde4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
    1196:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <xTaskResumeAll>
    119a:	81 11       	cpse	r24, r1
    119c:	ab cf       	rjmp	.-170    	; 0x10f4 <xQueueSemaphoreTake+0x1c>
                {
                    portYIELD_WITHIN_API();
    119e:	0e 94 d6 05 	call	0xbac	; 0xbac <vPortYield>
    11a2:	a8 cf       	rjmp	.-176    	; 0x10f4 <xQueueSemaphoreTake+0x1c>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
    11a4:	c8 01       	movw	r24, r16
    11a6:	0e 94 f2 06 	call	0xde4	; 0xde4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
    11aa:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <xTaskResumeAll>
    11ae:	a2 cf       	rjmp	.-188    	; 0x10f4 <xQueueSemaphoreTake+0x1c>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
    11b0:	c8 01       	movw	r24, r16
    11b2:	0e 94 f2 06 	call	0xde4	; 0xde4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
    11b6:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    11ba:	c8 01       	movw	r24, r16
    11bc:	0e 94 8e 06 	call	0xd1c	; 0xd1c <prvIsQueueEmpty>
    11c0:	88 23       	and	r24, r24
    11c2:	09 f4       	brne	.+2      	; 0x11c6 <xQueueSemaphoreTake+0xee>
    11c4:	97 cf       	rjmp	.-210    	; 0x10f4 <xQueueSemaphoreTake+0x1c>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
    11c6:	80 e0       	ldi	r24, 0x00	; 0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
    11c8:	0f 90       	pop	r0
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	df 91       	pop	r29
    11d4:	cf 91       	pop	r28
    11d6:	1f 91       	pop	r17
    11d8:	0f 91       	pop	r16
    11da:	ff 90       	pop	r15
    11dc:	08 95       	ret

000011de <prvResetNextTaskUnblockTime>:
    taskENTER_CRITICAL();
    {
        pxTimeOut->xOverflowCount = xNumOfOverflows;
        pxTimeOut->xTimeOnEntering = xTickCount;
    }
    taskEXIT_CRITICAL();
    11de:	e0 91 66 07 	lds	r30, 0x0766	; 0x800766 <pxDelayedTaskList>
    11e2:	f0 91 67 07 	lds	r31, 0x0767	; 0x800767 <pxDelayedTaskList+0x1>
    11e6:	80 81       	ld	r24, Z
    11e8:	81 11       	cpse	r24, r1
    11ea:	07 c0       	rjmp	.+14     	; 0x11fa <prvResetNextTaskUnblockTime+0x1c>
    11ec:	8f ef       	ldi	r24, 0xFF	; 255
    11ee:	9f ef       	ldi	r25, 0xFF	; 255
    11f0:	90 93 46 07 	sts	0x0746, r25	; 0x800746 <xNextTaskUnblockTime+0x1>
    11f4:	80 93 45 07 	sts	0x0745, r24	; 0x800745 <xNextTaskUnblockTime>
    11f8:	08 95       	ret
    11fa:	e0 91 66 07 	lds	r30, 0x0766	; 0x800766 <pxDelayedTaskList>
    11fe:	f0 91 67 07 	lds	r31, 0x0767	; 0x800767 <pxDelayedTaskList+0x1>
    1202:	05 80       	ldd	r0, Z+5	; 0x05
    1204:	f6 81       	ldd	r31, Z+6	; 0x06
    1206:	e0 2d       	mov	r30, r0
    1208:	80 81       	ld	r24, Z
    120a:	91 81       	ldd	r25, Z+1	; 0x01
    120c:	90 93 46 07 	sts	0x0746, r25	; 0x800746 <xNextTaskUnblockTime+0x1>
    1210:	80 93 45 07 	sts	0x0745, r24	; 0x800745 <xNextTaskUnblockTime>
    1214:	08 95       	ret

00001216 <prvDeleteTCB>:
    1216:	cf 93       	push	r28
    1218:	df 93       	push	r29
    121a:	ec 01       	movw	r28, r24
    121c:	8f 89       	ldd	r24, Y+23	; 0x17
    121e:	98 8d       	ldd	r25, Y+24	; 0x18
    1220:	0e 94 c8 04 	call	0x990	; 0x990 <vPortFree>
    1224:	ce 01       	movw	r24, r28
    1226:	0e 94 c8 04 	call	0x990	; 0x990 <vPortFree>
    122a:	df 91       	pop	r29
    122c:	cf 91       	pop	r28
    122e:	08 95       	ret

00001230 <prvInitialiseNewTask>:
    1230:	6f 92       	push	r6
    1232:	7f 92       	push	r7
    1234:	8f 92       	push	r8
    1236:	9f 92       	push	r9
    1238:	af 92       	push	r10
    123a:	bf 92       	push	r11
    123c:	cf 92       	push	r12
    123e:	df 92       	push	r13
    1240:	ef 92       	push	r14
    1242:	0f 93       	push	r16
    1244:	1f 93       	push	r17
    1246:	cf 93       	push	r28
    1248:	df 93       	push	r29
    124a:	cd b7       	in	r28, 0x3d	; 61
    124c:	de b7       	in	r29, 0x3e	; 62
    124e:	4c 01       	movw	r8, r24
    1250:	d5 01       	movw	r26, r10
    1252:	57 96       	adiw	r26, 0x17	; 23
    1254:	8d 91       	ld	r24, X+
    1256:	9c 91       	ld	r25, X
    1258:	58 97       	sbiw	r26, 0x18	; 24
    125a:	21 50       	subi	r18, 0x01	; 1
    125c:	31 09       	sbc	r19, r1
    125e:	3c 01       	movw	r6, r24
    1260:	62 0e       	add	r6, r18
    1262:	73 1e       	adc	r7, r19
    1264:	61 15       	cp	r22, r1
    1266:	71 05       	cpc	r23, r1
    1268:	89 f4       	brne	.+34     	; 0x128c <prvInitialiseNewTask+0x5c>
    126a:	16 c0       	rjmp	.+44     	; 0x1298 <prvInitialiseNewTask+0x68>
    126c:	82 2f       	mov	r24, r18
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	fb 01       	movw	r30, r22
    1272:	e8 0f       	add	r30, r24
    1274:	f9 1f       	adc	r31, r25
    1276:	30 81       	ld	r19, Z
    1278:	d5 01       	movw	r26, r10
    127a:	a8 0f       	add	r26, r24
    127c:	b9 1f       	adc	r27, r25
    127e:	59 96       	adiw	r26, 0x19	; 25
    1280:	3c 93       	st	X, r19
    1282:	80 81       	ld	r24, Z
    1284:	88 23       	and	r24, r24
    1286:	29 f0       	breq	.+10     	; 0x1292 <prvInitialiseNewTask+0x62>
    1288:	2f 5f       	subi	r18, 0xFF	; 255
    128a:	01 c0       	rjmp	.+2      	; 0x128e <prvInitialiseNewTask+0x5e>
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	28 30       	cpi	r18, 0x08	; 8
    1290:	68 f3       	brcs	.-38     	; 0x126c <prvInitialiseNewTask+0x3c>
    1292:	f5 01       	movw	r30, r10
    1294:	10 a2       	std	Z+32, r1	; 0x20
    1296:	03 c0       	rjmp	.+6      	; 0x129e <prvInitialiseNewTask+0x6e>
    1298:	d5 01       	movw	r26, r10
    129a:	59 96       	adiw	r26, 0x19	; 25
    129c:	1c 92       	st	X, r1
    129e:	b3 e0       	ldi	r27, 0x03	; 3
    12a0:	be 15       	cp	r27, r14
    12a2:	20 f4       	brcc	.+8      	; 0x12ac <prvInitialiseNewTask+0x7c>
    12a4:	0f 2e       	mov	r0, r31
    12a6:	f3 e0       	ldi	r31, 0x03	; 3
    12a8:	ef 2e       	mov	r14, r31
    12aa:	f0 2d       	mov	r31, r0
    12ac:	f5 01       	movw	r30, r10
    12ae:	e6 8a       	std	Z+22, r14	; 0x16
    12b0:	c5 01       	movw	r24, r10
    12b2:	02 96       	adiw	r24, 0x02	; 2
    12b4:	0e 94 d7 04 	call	0x9ae	; 0x9ae <vListInitialiseItem>
    12b8:	c5 01       	movw	r24, r10
    12ba:	0c 96       	adiw	r24, 0x0c	; 12
    12bc:	0e 94 d7 04 	call	0x9ae	; 0x9ae <vListInitialiseItem>
    12c0:	d5 01       	movw	r26, r10
    12c2:	19 96       	adiw	r26, 0x09	; 9
    12c4:	bc 92       	st	X, r11
    12c6:	ae 92       	st	-X, r10
    12c8:	18 97       	sbiw	r26, 0x08	; 8
    12ca:	84 e0       	ldi	r24, 0x04	; 4
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	8e 19       	sub	r24, r14
    12d0:	91 09       	sbc	r25, r1
    12d2:	1d 96       	adiw	r26, 0x0d	; 13
    12d4:	9c 93       	st	X, r25
    12d6:	8e 93       	st	-X, r24
    12d8:	1c 97       	sbiw	r26, 0x0c	; 12
    12da:	53 96       	adiw	r26, 0x13	; 19
    12dc:	bc 92       	st	X, r11
    12de:	ae 92       	st	-X, r10
    12e0:	52 97       	sbiw	r26, 0x12	; 18
    12e2:	84 e0       	ldi	r24, 0x04	; 4
    12e4:	f5 01       	movw	r30, r10
    12e6:	b1 96       	adiw	r30, 0x21	; 33
    12e8:	df 01       	movw	r26, r30
    12ea:	1d 92       	st	X+, r1
    12ec:	8a 95       	dec	r24
    12ee:	e9 f7       	brne	.-6      	; 0x12ea <prvInitialiseNewTask+0xba>
    12f0:	f5 01       	movw	r30, r10
    12f2:	15 a2       	std	Z+37, r1	; 0x25
    12f4:	a8 01       	movw	r20, r16
    12f6:	b4 01       	movw	r22, r8
    12f8:	c3 01       	movw	r24, r6
    12fa:	0e 94 3b 05 	call	0xa76	; 0xa76 <pxPortInitialiseStack>
    12fe:	d5 01       	movw	r26, r10
    1300:	8d 93       	st	X+, r24
    1302:	9c 93       	st	X, r25
    1304:	c1 14       	cp	r12, r1
    1306:	d1 04       	cpc	r13, r1
    1308:	19 f0       	breq	.+6      	; 0x1310 <prvInitialiseNewTask+0xe0>
    130a:	f6 01       	movw	r30, r12
    130c:	b1 82       	std	Z+1, r11	; 0x01
    130e:	a0 82       	st	Z, r10
    1310:	df 91       	pop	r29
    1312:	cf 91       	pop	r28
    1314:	1f 91       	pop	r17
    1316:	0f 91       	pop	r16
    1318:	ef 90       	pop	r14
    131a:	df 90       	pop	r13
    131c:	cf 90       	pop	r12
    131e:	bf 90       	pop	r11
    1320:	af 90       	pop	r10
    1322:	9f 90       	pop	r9
    1324:	8f 90       	pop	r8
    1326:	7f 90       	pop	r7
    1328:	6f 90       	pop	r6
    132a:	08 95       	ret

0000132c <prvInitialiseTaskLists>:
    132c:	cf 93       	push	r28
    132e:	c0 e0       	ldi	r28, 0x00	; 0
    1330:	10 c0       	rjmp	.+32     	; 0x1352 <prvInitialiseTaskLists+0x26>
    1332:	8c 2f       	mov	r24, r28
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	9c 01       	movw	r18, r24
    1338:	22 0f       	add	r18, r18
    133a:	33 1f       	adc	r19, r19
    133c:	22 0f       	add	r18, r18
    133e:	33 1f       	adc	r19, r19
    1340:	22 0f       	add	r18, r18
    1342:	33 1f       	adc	r19, r19
    1344:	82 0f       	add	r24, r18
    1346:	93 1f       	adc	r25, r19
    1348:	86 58       	subi	r24, 0x86	; 134
    134a:	98 4f       	sbci	r25, 0xF8	; 248
    134c:	0e 94 c9 04 	call	0x992	; 0x992 <vListInitialise>
    1350:	cf 5f       	subi	r28, 0xFF	; 255
    1352:	c4 30       	cpi	r28, 0x04	; 4
    1354:	70 f3       	brcs	.-36     	; 0x1332 <prvInitialiseTaskLists+0x6>
    1356:	81 e7       	ldi	r24, 0x71	; 113
    1358:	97 e0       	ldi	r25, 0x07	; 7
    135a:	0e 94 c9 04 	call	0x992	; 0x992 <vListInitialise>
    135e:	88 e6       	ldi	r24, 0x68	; 104
    1360:	97 e0       	ldi	r25, 0x07	; 7
    1362:	0e 94 c9 04 	call	0x992	; 0x992 <vListInitialise>
    1366:	8b e5       	ldi	r24, 0x5B	; 91
    1368:	97 e0       	ldi	r25, 0x07	; 7
    136a:	0e 94 c9 04 	call	0x992	; 0x992 <vListInitialise>
    136e:	82 e5       	ldi	r24, 0x52	; 82
    1370:	97 e0       	ldi	r25, 0x07	; 7
    1372:	0e 94 c9 04 	call	0x992	; 0x992 <vListInitialise>
    1376:	81 e7       	ldi	r24, 0x71	; 113
    1378:	97 e0       	ldi	r25, 0x07	; 7
    137a:	90 93 67 07 	sts	0x0767, r25	; 0x800767 <pxDelayedTaskList+0x1>
    137e:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <pxDelayedTaskList>
    1382:	88 e6       	ldi	r24, 0x68	; 104
    1384:	97 e0       	ldi	r25, 0x07	; 7
    1386:	90 93 65 07 	sts	0x0765, r25	; 0x800765 <pxOverflowDelayedTaskList+0x1>
    138a:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <pxOverflowDelayedTaskList>
    138e:	cf 91       	pop	r28
    1390:	08 95       	ret

00001392 <prvAddNewTaskToReadyList>:
    1392:	cf 93       	push	r28
    1394:	df 93       	push	r29
    1396:	ec 01       	movw	r28, r24
    1398:	0f b6       	in	r0, 0x3f	; 63
    139a:	f8 94       	cli
    139c:	0f 92       	push	r0
    139e:	80 91 50 07 	lds	r24, 0x0750	; 0x800750 <uxCurrentNumberOfTasks>
    13a2:	8f 5f       	subi	r24, 0xFF	; 255
    13a4:	80 93 50 07 	sts	0x0750, r24	; 0x800750 <uxCurrentNumberOfTasks>
    13a8:	80 91 9e 07 	lds	r24, 0x079E	; 0x80079e <pxCurrentTCB>
    13ac:	90 91 9f 07 	lds	r25, 0x079F	; 0x80079f <pxCurrentTCB+0x1>
    13b0:	89 2b       	or	r24, r25
    13b2:	59 f4       	brne	.+22     	; 0x13ca <prvAddNewTaskToReadyList+0x38>
    13b4:	d0 93 9f 07 	sts	0x079F, r29	; 0x80079f <pxCurrentTCB+0x1>
    13b8:	c0 93 9e 07 	sts	0x079E, r28	; 0x80079e <pxCurrentTCB>
    13bc:	80 91 50 07 	lds	r24, 0x0750	; 0x800750 <uxCurrentNumberOfTasks>
    13c0:	81 30       	cpi	r24, 0x01	; 1
    13c2:	99 f4       	brne	.+38     	; 0x13ea <prvAddNewTaskToReadyList+0x58>
    13c4:	0e 94 96 09 	call	0x132c	; 0x132c <prvInitialiseTaskLists>
    13c8:	10 c0       	rjmp	.+32     	; 0x13ea <prvAddNewTaskToReadyList+0x58>
    13ca:	80 91 4c 07 	lds	r24, 0x074C	; 0x80074c <xSchedulerRunning>
    13ce:	81 11       	cpse	r24, r1
    13d0:	0c c0       	rjmp	.+24     	; 0x13ea <prvAddNewTaskToReadyList+0x58>
    13d2:	e0 91 9e 07 	lds	r30, 0x079E	; 0x80079e <pxCurrentTCB>
    13d6:	f0 91 9f 07 	lds	r31, 0x079F	; 0x80079f <pxCurrentTCB+0x1>
    13da:	96 89       	ldd	r25, Z+22	; 0x16
    13dc:	8e 89       	ldd	r24, Y+22	; 0x16
    13de:	89 17       	cp	r24, r25
    13e0:	20 f0       	brcs	.+8      	; 0x13ea <prvAddNewTaskToReadyList+0x58>
    13e2:	d0 93 9f 07 	sts	0x079F, r29	; 0x80079f <pxCurrentTCB+0x1>
    13e6:	c0 93 9e 07 	sts	0x079E, r28	; 0x80079e <pxCurrentTCB>
    13ea:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <uxTaskNumber>
    13ee:	8f 5f       	subi	r24, 0xFF	; 255
    13f0:	80 93 47 07 	sts	0x0747, r24	; 0x800747 <uxTaskNumber>
    13f4:	8e 89       	ldd	r24, Y+22	; 0x16
    13f6:	90 91 4d 07 	lds	r25, 0x074D	; 0x80074d <uxTopReadyPriority>
    13fa:	98 17       	cp	r25, r24
    13fc:	10 f4       	brcc	.+4      	; 0x1402 <prvAddNewTaskToReadyList+0x70>
    13fe:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <uxTopReadyPriority>
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	fc 01       	movw	r30, r24
    1406:	ee 0f       	add	r30, r30
    1408:	ff 1f       	adc	r31, r31
    140a:	ee 0f       	add	r30, r30
    140c:	ff 1f       	adc	r31, r31
    140e:	ee 0f       	add	r30, r30
    1410:	ff 1f       	adc	r31, r31
    1412:	8e 0f       	add	r24, r30
    1414:	9f 1f       	adc	r25, r31
    1416:	fc 01       	movw	r30, r24
    1418:	e6 58       	subi	r30, 0x86	; 134
    141a:	f8 4f       	sbci	r31, 0xF8	; 248
    141c:	01 80       	ldd	r0, Z+1	; 0x01
    141e:	f2 81       	ldd	r31, Z+2	; 0x02
    1420:	e0 2d       	mov	r30, r0
    1422:	fd 83       	std	Y+5, r31	; 0x05
    1424:	ec 83       	std	Y+4, r30	; 0x04
    1426:	84 81       	ldd	r24, Z+4	; 0x04
    1428:	95 81       	ldd	r25, Z+5	; 0x05
    142a:	9f 83       	std	Y+7, r25	; 0x07
    142c:	8e 83       	std	Y+6, r24	; 0x06
    142e:	a4 81       	ldd	r26, Z+4	; 0x04
    1430:	b5 81       	ldd	r27, Z+5	; 0x05
    1432:	ce 01       	movw	r24, r28
    1434:	02 96       	adiw	r24, 0x02	; 2
    1436:	13 96       	adiw	r26, 0x03	; 3
    1438:	9c 93       	st	X, r25
    143a:	8e 93       	st	-X, r24
    143c:	12 97       	sbiw	r26, 0x02	; 2
    143e:	95 83       	std	Z+5, r25	; 0x05
    1440:	84 83       	std	Z+4, r24	; 0x04
    1442:	ee 89       	ldd	r30, Y+22	; 0x16
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	cf 01       	movw	r24, r30
    1448:	88 0f       	add	r24, r24
    144a:	99 1f       	adc	r25, r25
    144c:	88 0f       	add	r24, r24
    144e:	99 1f       	adc	r25, r25
    1450:	88 0f       	add	r24, r24
    1452:	99 1f       	adc	r25, r25
    1454:	e8 0f       	add	r30, r24
    1456:	f9 1f       	adc	r31, r25
    1458:	e6 58       	subi	r30, 0x86	; 134
    145a:	f8 4f       	sbci	r31, 0xF8	; 248
    145c:	fb 87       	std	Y+11, r31	; 0x0b
    145e:	ea 87       	std	Y+10, r30	; 0x0a
    1460:	80 81       	ld	r24, Z
    1462:	8f 5f       	subi	r24, 0xFF	; 255
    1464:	80 83       	st	Z, r24
    1466:	0f 90       	pop	r0
    1468:	0f be       	out	0x3f, r0	; 63
    146a:	80 91 4c 07 	lds	r24, 0x074C	; 0x80074c <xSchedulerRunning>
    146e:	88 23       	and	r24, r24
    1470:	51 f0       	breq	.+20     	; 0x1486 <prvAddNewTaskToReadyList+0xf4>
    1472:	e0 91 9e 07 	lds	r30, 0x079E	; 0x80079e <pxCurrentTCB>
    1476:	f0 91 9f 07 	lds	r31, 0x079F	; 0x80079f <pxCurrentTCB+0x1>
    147a:	96 89       	ldd	r25, Z+22	; 0x16
    147c:	8e 89       	ldd	r24, Y+22	; 0x16
    147e:	98 17       	cp	r25, r24
    1480:	10 f4       	brcc	.+4      	; 0x1486 <prvAddNewTaskToReadyList+0xf4>
    1482:	0e 94 d6 05 	call	0xbac	; 0xbac <vPortYield>
    1486:	df 91       	pop	r29
    1488:	cf 91       	pop	r28
    148a:	08 95       	ret

0000148c <prvCheckTasksWaitingTermination>:
    148c:	cf 93       	push	r28
    148e:	df 93       	push	r29
    1490:	1c c0       	rjmp	.+56     	; 0x14ca <prvCheckTasksWaitingTermination+0x3e>
    1492:	0f b6       	in	r0, 0x3f	; 63
    1494:	f8 94       	cli
    1496:	0f 92       	push	r0
    1498:	e0 91 57 07 	lds	r30, 0x0757	; 0x800757 <xTasksWaitingTermination+0x5>
    149c:	f0 91 58 07 	lds	r31, 0x0758	; 0x800758 <xTasksWaitingTermination+0x6>
    14a0:	c6 81       	ldd	r28, Z+6	; 0x06
    14a2:	d7 81       	ldd	r29, Z+7	; 0x07
    14a4:	ce 01       	movw	r24, r28
    14a6:	02 96       	adiw	r24, 0x02	; 2
    14a8:	0e 94 0c 05 	call	0xa18	; 0xa18 <uxListRemove>
    14ac:	80 91 50 07 	lds	r24, 0x0750	; 0x800750 <uxCurrentNumberOfTasks>
    14b0:	81 50       	subi	r24, 0x01	; 1
    14b2:	80 93 50 07 	sts	0x0750, r24	; 0x800750 <uxCurrentNumberOfTasks>
    14b6:	80 91 51 07 	lds	r24, 0x0751	; 0x800751 <uxDeletedTasksWaitingCleanUp>
    14ba:	81 50       	subi	r24, 0x01	; 1
    14bc:	80 93 51 07 	sts	0x0751, r24	; 0x800751 <uxDeletedTasksWaitingCleanUp>
    14c0:	0f 90       	pop	r0
    14c2:	0f be       	out	0x3f, r0	; 63
    14c4:	ce 01       	movw	r24, r28
    14c6:	0e 94 0b 09 	call	0x1216	; 0x1216 <prvDeleteTCB>
    14ca:	80 91 51 07 	lds	r24, 0x0751	; 0x800751 <uxDeletedTasksWaitingCleanUp>
    14ce:	81 11       	cpse	r24, r1
    14d0:	e0 cf       	rjmp	.-64     	; 0x1492 <prvCheckTasksWaitingTermination+0x6>
    14d2:	df 91       	pop	r29
    14d4:	cf 91       	pop	r28
    14d6:	08 95       	ret

000014d8 <prvIdleTask>:
    14d8:	0e 94 46 0a 	call	0x148c	; 0x148c <prvCheckTasksWaitingTermination>
    14dc:	80 91 7a 07 	lds	r24, 0x077A	; 0x80077a <pxReadyTasksLists>
    14e0:	82 30       	cpi	r24, 0x02	; 2
    14e2:	d0 f3       	brcs	.-12     	; 0x14d8 <prvIdleTask>
    14e4:	0e 94 d6 05 	call	0xbac	; 0xbac <vPortYield>
    14e8:	f7 cf       	rjmp	.-18     	; 0x14d8 <prvIdleTask>

000014ea <prvAddCurrentTaskToDelayedList>:
    14ea:	0f 93       	push	r16
    14ec:	1f 93       	push	r17
    14ee:	cf 93       	push	r28
    14f0:	df 93       	push	r29
    14f2:	ec 01       	movw	r28, r24
    14f4:	00 91 4e 07 	lds	r16, 0x074E	; 0x80074e <xTickCount>
    14f8:	10 91 4f 07 	lds	r17, 0x074F	; 0x80074f <xTickCount+0x1>
    14fc:	80 91 9e 07 	lds	r24, 0x079E	; 0x80079e <pxCurrentTCB>
    1500:	90 91 9f 07 	lds	r25, 0x079F	; 0x80079f <pxCurrentTCB+0x1>
    1504:	02 96       	adiw	r24, 0x02	; 2
    1506:	0e 94 0c 05 	call	0xa18	; 0xa18 <uxListRemove>
    150a:	c0 0f       	add	r28, r16
    150c:	d1 1f       	adc	r29, r17
    150e:	e0 91 9e 07 	lds	r30, 0x079E	; 0x80079e <pxCurrentTCB>
    1512:	f0 91 9f 07 	lds	r31, 0x079F	; 0x80079f <pxCurrentTCB+0x1>
    1516:	d3 83       	std	Z+3, r29	; 0x03
    1518:	c2 83       	std	Z+2, r28	; 0x02
    151a:	c0 17       	cp	r28, r16
    151c:	d1 07       	cpc	r29, r17
    151e:	68 f4       	brcc	.+26     	; 0x153a <prvAddCurrentTaskToDelayedList+0x50>
    1520:	60 91 9e 07 	lds	r22, 0x079E	; 0x80079e <pxCurrentTCB>
    1524:	70 91 9f 07 	lds	r23, 0x079F	; 0x80079f <pxCurrentTCB+0x1>
    1528:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <pxOverflowDelayedTaskList>
    152c:	90 91 65 07 	lds	r25, 0x0765	; 0x800765 <pxOverflowDelayedTaskList+0x1>
    1530:	6e 5f       	subi	r22, 0xFE	; 254
    1532:	7f 4f       	sbci	r23, 0xFF	; 255
    1534:	0e 94 db 04 	call	0x9b6	; 0x9b6 <vListInsert>
    1538:	17 c0       	rjmp	.+46     	; 0x1568 <prvAddCurrentTaskToDelayedList+0x7e>
    153a:	60 91 9e 07 	lds	r22, 0x079E	; 0x80079e <pxCurrentTCB>
    153e:	70 91 9f 07 	lds	r23, 0x079F	; 0x80079f <pxCurrentTCB+0x1>
    1542:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <pxDelayedTaskList>
    1546:	90 91 67 07 	lds	r25, 0x0767	; 0x800767 <pxDelayedTaskList+0x1>
    154a:	6e 5f       	subi	r22, 0xFE	; 254
    154c:	7f 4f       	sbci	r23, 0xFF	; 255
    154e:	0e 94 db 04 	call	0x9b6	; 0x9b6 <vListInsert>
    1552:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <xNextTaskUnblockTime>
    1556:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <xNextTaskUnblockTime+0x1>
    155a:	c8 17       	cp	r28, r24
    155c:	d9 07       	cpc	r29, r25
    155e:	20 f4       	brcc	.+8      	; 0x1568 <prvAddCurrentTaskToDelayedList+0x7e>
    1560:	d0 93 46 07 	sts	0x0746, r29	; 0x800746 <xNextTaskUnblockTime+0x1>
    1564:	c0 93 45 07 	sts	0x0745, r28	; 0x800745 <xNextTaskUnblockTime>
    1568:	df 91       	pop	r29
    156a:	cf 91       	pop	r28
    156c:	1f 91       	pop	r17
    156e:	0f 91       	pop	r16
    1570:	08 95       	ret

00001572 <xTaskCreate>:
    1572:	2f 92       	push	r2
    1574:	3f 92       	push	r3
    1576:	4f 92       	push	r4
    1578:	5f 92       	push	r5
    157a:	6f 92       	push	r6
    157c:	7f 92       	push	r7
    157e:	8f 92       	push	r8
    1580:	9f 92       	push	r9
    1582:	af 92       	push	r10
    1584:	bf 92       	push	r11
    1586:	cf 92       	push	r12
    1588:	df 92       	push	r13
    158a:	ef 92       	push	r14
    158c:	ff 92       	push	r15
    158e:	0f 93       	push	r16
    1590:	1f 93       	push	r17
    1592:	cf 93       	push	r28
    1594:	df 93       	push	r29
    1596:	3c 01       	movw	r6, r24
    1598:	1b 01       	movw	r2, r22
    159a:	5a 01       	movw	r10, r20
    159c:	29 01       	movw	r4, r18
    159e:	ca 01       	movw	r24, r20
    15a0:	0e 94 8e 04 	call	0x91c	; 0x91c <pvPortMalloc>
    15a4:	6c 01       	movw	r12, r24
    15a6:	89 2b       	or	r24, r25
    15a8:	71 f0       	breq	.+28     	; 0x15c6 <xTaskCreate+0x54>
    15aa:	86 e2       	ldi	r24, 0x26	; 38
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	0e 94 8e 04 	call	0x91c	; 0x91c <pvPortMalloc>
    15b2:	ec 01       	movw	r28, r24
    15b4:	89 2b       	or	r24, r25
    15b6:	19 f0       	breq	.+6      	; 0x15be <xTaskCreate+0x4c>
    15b8:	d8 8e       	std	Y+24, r13	; 0x18
    15ba:	cf 8a       	std	Y+23, r12	; 0x17
    15bc:	06 c0       	rjmp	.+12     	; 0x15ca <xTaskCreate+0x58>
    15be:	c6 01       	movw	r24, r12
    15c0:	0e 94 c8 04 	call	0x990	; 0x990 <vPortFree>
    15c4:	02 c0       	rjmp	.+4      	; 0x15ca <xTaskCreate+0x58>
    15c6:	c0 e0       	ldi	r28, 0x00	; 0
    15c8:	d0 e0       	ldi	r29, 0x00	; 0
    15ca:	20 97       	sbiw	r28, 0x00	; 0
    15cc:	91 f0       	breq	.+36     	; 0x15f2 <xTaskCreate+0x80>
    15ce:	95 01       	movw	r18, r10
    15d0:	40 e0       	ldi	r20, 0x00	; 0
    15d2:	50 e0       	ldi	r21, 0x00	; 0
    15d4:	81 2c       	mov	r8, r1
    15d6:	91 2c       	mov	r9, r1
    15d8:	5e 01       	movw	r10, r28
    15da:	67 01       	movw	r12, r14
    15dc:	e0 2e       	mov	r14, r16
    15de:	82 01       	movw	r16, r4
    15e0:	b1 01       	movw	r22, r2
    15e2:	c3 01       	movw	r24, r6
    15e4:	0e 94 18 09 	call	0x1230	; 0x1230 <prvInitialiseNewTask>
    15e8:	ce 01       	movw	r24, r28
    15ea:	0e 94 c9 09 	call	0x1392	; 0x1392 <prvAddNewTaskToReadyList>
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	01 c0       	rjmp	.+2      	; 0x15f4 <xTaskCreate+0x82>
    15f2:	8f ef       	ldi	r24, 0xFF	; 255
    15f4:	df 91       	pop	r29
    15f6:	cf 91       	pop	r28
    15f8:	1f 91       	pop	r17
    15fa:	0f 91       	pop	r16
    15fc:	ff 90       	pop	r15
    15fe:	ef 90       	pop	r14
    1600:	df 90       	pop	r13
    1602:	cf 90       	pop	r12
    1604:	bf 90       	pop	r11
    1606:	af 90       	pop	r10
    1608:	9f 90       	pop	r9
    160a:	8f 90       	pop	r8
    160c:	7f 90       	pop	r7
    160e:	6f 90       	pop	r6
    1610:	5f 90       	pop	r5
    1612:	4f 90       	pop	r4
    1614:	3f 90       	pop	r3
    1616:	2f 90       	pop	r2
    1618:	08 95       	ret

0000161a <vTaskStartScheduler>:
    161a:	ef 92       	push	r14
    161c:	ff 92       	push	r15
    161e:	0f 93       	push	r16
    1620:	0f 2e       	mov	r0, r31
    1622:	f3 e4       	ldi	r31, 0x43	; 67
    1624:	ef 2e       	mov	r14, r31
    1626:	f7 e0       	ldi	r31, 0x07	; 7
    1628:	ff 2e       	mov	r15, r31
    162a:	f0 2d       	mov	r31, r0
    162c:	00 e0       	ldi	r16, 0x00	; 0
    162e:	20 e0       	ldi	r18, 0x00	; 0
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	45 e5       	ldi	r20, 0x55	; 85
    1634:	50 e0       	ldi	r21, 0x00	; 0
    1636:	61 e6       	ldi	r22, 0x61	; 97
    1638:	70 e0       	ldi	r23, 0x00	; 0
    163a:	8c e6       	ldi	r24, 0x6C	; 108
    163c:	9a e0       	ldi	r25, 0x0A	; 10
    163e:	0e 94 b9 0a 	call	0x1572	; 0x1572 <xTaskCreate>
    1642:	81 30       	cpi	r24, 0x01	; 1
    1644:	81 f4       	brne	.+32     	; 0x1666 <vTaskStartScheduler+0x4c>
    1646:	f8 94       	cli
    1648:	8f ef       	ldi	r24, 0xFF	; 255
    164a:	9f ef       	ldi	r25, 0xFF	; 255
    164c:	90 93 46 07 	sts	0x0746, r25	; 0x800746 <xNextTaskUnblockTime+0x1>
    1650:	80 93 45 07 	sts	0x0745, r24	; 0x800745 <xNextTaskUnblockTime>
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	80 93 4c 07 	sts	0x074C, r24	; 0x80074c <xSchedulerRunning>
    165a:	10 92 4f 07 	sts	0x074F, r1	; 0x80074f <xTickCount+0x1>
    165e:	10 92 4e 07 	sts	0x074E, r1	; 0x80074e <xTickCount>
    1662:	0e 94 a7 05 	call	0xb4e	; 0xb4e <xPortStartScheduler>
    1666:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    166a:	0f 91       	pop	r16
    166c:	ff 90       	pop	r15
    166e:	ef 90       	pop	r14
    1670:	08 95       	ret

00001672 <vTaskSuspendAll>:
    1672:	80 91 42 07 	lds	r24, 0x0742	; 0x800742 <uxSchedulerSuspended>
    1676:	8f 5f       	subi	r24, 0xFF	; 255
    1678:	80 93 42 07 	sts	0x0742, r24	; 0x800742 <uxSchedulerSuspended>
    167c:	08 95       	ret

0000167e <xTaskIncrementTick>:
    167e:	0f 93       	push	r16
    1680:	1f 93       	push	r17
    1682:	cf 93       	push	r28
    1684:	df 93       	push	r29
    1686:	80 91 42 07 	lds	r24, 0x0742	; 0x800742 <uxSchedulerSuspended>
    168a:	81 11       	cpse	r24, r1
    168c:	01 c1       	rjmp	.+514    	; 0x1890 <xTaskIncrementTick+0x212>
    168e:	c0 91 4e 07 	lds	r28, 0x074E	; 0x80074e <xTickCount>
    1692:	d0 91 4f 07 	lds	r29, 0x074F	; 0x80074f <xTickCount+0x1>
    1696:	8e 01       	movw	r16, r28
    1698:	0f 5f       	subi	r16, 0xFF	; 255
    169a:	1f 4f       	sbci	r17, 0xFF	; 255
    169c:	10 93 4f 07 	sts	0x074F, r17	; 0x80074f <xTickCount+0x1>
    16a0:	00 93 4e 07 	sts	0x074E, r16	; 0x80074e <xTickCount>
    16a4:	01 15       	cp	r16, r1
    16a6:	11 05       	cpc	r17, r1
    16a8:	b9 f4       	brne	.+46     	; 0x16d8 <xTaskIncrementTick+0x5a>
    16aa:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <pxDelayedTaskList>
    16ae:	90 91 67 07 	lds	r25, 0x0767	; 0x800767 <pxDelayedTaskList+0x1>
    16b2:	20 91 64 07 	lds	r18, 0x0764	; 0x800764 <pxOverflowDelayedTaskList>
    16b6:	30 91 65 07 	lds	r19, 0x0765	; 0x800765 <pxOverflowDelayedTaskList+0x1>
    16ba:	30 93 67 07 	sts	0x0767, r19	; 0x800767 <pxDelayedTaskList+0x1>
    16be:	20 93 66 07 	sts	0x0766, r18	; 0x800766 <pxDelayedTaskList>
    16c2:	90 93 65 07 	sts	0x0765, r25	; 0x800765 <pxOverflowDelayedTaskList+0x1>
    16c6:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <pxOverflowDelayedTaskList>
    16ca:	80 91 48 07 	lds	r24, 0x0748	; 0x800748 <xNumOfOverflows>
    16ce:	8f 5f       	subi	r24, 0xFF	; 255
    16d0:	80 93 48 07 	sts	0x0748, r24	; 0x800748 <xNumOfOverflows>
    16d4:	0e 94 ef 08 	call	0x11de	; 0x11de <prvResetNextTaskUnblockTime>
    16d8:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <xNextTaskUnblockTime>
    16dc:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <xNextTaskUnblockTime+0x1>
    16e0:	08 17       	cp	r16, r24
    16e2:	19 07       	cpc	r17, r25
    16e4:	20 f4       	brcc	.+8      	; 0x16ee <xTaskIncrementTick+0x70>
    16e6:	80 e0       	ldi	r24, 0x00	; 0
    16e8:	b8 c0       	rjmp	.+368    	; 0x185a <xTaskIncrementTick+0x1dc>
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	01 c0       	rjmp	.+2      	; 0x16f0 <xTaskIncrementTick+0x72>
    16ee:	80 e0       	ldi	r24, 0x00	; 0
    16f0:	e0 91 66 07 	lds	r30, 0x0766	; 0x800766 <pxDelayedTaskList>
    16f4:	f0 91 67 07 	lds	r31, 0x0767	; 0x800767 <pxDelayedTaskList+0x1>
    16f8:	90 81       	ld	r25, Z
    16fa:	91 11       	cpse	r25, r1
    16fc:	07 c0       	rjmp	.+14     	; 0x170c <xTaskIncrementTick+0x8e>
    16fe:	2f ef       	ldi	r18, 0xFF	; 255
    1700:	3f ef       	ldi	r19, 0xFF	; 255
    1702:	30 93 46 07 	sts	0x0746, r19	; 0x800746 <xNextTaskUnblockTime+0x1>
    1706:	20 93 45 07 	sts	0x0745, r18	; 0x800745 <xNextTaskUnblockTime>
    170a:	a7 c0       	rjmp	.+334    	; 0x185a <xTaskIncrementTick+0x1dc>
    170c:	e0 91 66 07 	lds	r30, 0x0766	; 0x800766 <pxDelayedTaskList>
    1710:	f0 91 67 07 	lds	r31, 0x0767	; 0x800767 <pxDelayedTaskList+0x1>
    1714:	05 80       	ldd	r0, Z+5	; 0x05
    1716:	f6 81       	ldd	r31, Z+6	; 0x06
    1718:	e0 2d       	mov	r30, r0
    171a:	06 80       	ldd	r0, Z+6	; 0x06
    171c:	f7 81       	ldd	r31, Z+7	; 0x07
    171e:	e0 2d       	mov	r30, r0
    1720:	22 81       	ldd	r18, Z+2	; 0x02
    1722:	33 81       	ldd	r19, Z+3	; 0x03
    1724:	02 17       	cp	r16, r18
    1726:	13 07       	cpc	r17, r19
    1728:	28 f4       	brcc	.+10     	; 0x1734 <xTaskIncrementTick+0xb6>
    172a:	30 93 46 07 	sts	0x0746, r19	; 0x800746 <xNextTaskUnblockTime+0x1>
    172e:	20 93 45 07 	sts	0x0745, r18	; 0x800745 <xNextTaskUnblockTime>
    1732:	93 c0       	rjmp	.+294    	; 0x185a <xTaskIncrementTick+0x1dc>
    1734:	a2 85       	ldd	r26, Z+10	; 0x0a
    1736:	b3 85       	ldd	r27, Z+11	; 0x0b
    1738:	24 81       	ldd	r18, Z+4	; 0x04
    173a:	35 81       	ldd	r19, Z+5	; 0x05
    173c:	46 81       	ldd	r20, Z+6	; 0x06
    173e:	57 81       	ldd	r21, Z+7	; 0x07
    1740:	e9 01       	movw	r28, r18
    1742:	5d 83       	std	Y+5, r21	; 0x05
    1744:	4c 83       	std	Y+4, r20	; 0x04
    1746:	26 81       	ldd	r18, Z+6	; 0x06
    1748:	37 81       	ldd	r19, Z+7	; 0x07
    174a:	44 81       	ldd	r20, Z+4	; 0x04
    174c:	55 81       	ldd	r21, Z+5	; 0x05
    174e:	e9 01       	movw	r28, r18
    1750:	5b 83       	std	Y+3, r21	; 0x03
    1752:	4a 83       	std	Y+2, r20	; 0x02
    1754:	11 96       	adiw	r26, 0x01	; 1
    1756:	2d 91       	ld	r18, X+
    1758:	3c 91       	ld	r19, X
    175a:	12 97       	sbiw	r26, 0x02	; 2
    175c:	af 01       	movw	r20, r30
    175e:	4e 5f       	subi	r20, 0xFE	; 254
    1760:	5f 4f       	sbci	r21, 0xFF	; 255
    1762:	24 17       	cp	r18, r20
    1764:	35 07       	cpc	r19, r21
    1766:	31 f4       	brne	.+12     	; 0x1774 <xTaskIncrementTick+0xf6>
    1768:	26 81       	ldd	r18, Z+6	; 0x06
    176a:	37 81       	ldd	r19, Z+7	; 0x07
    176c:	12 96       	adiw	r26, 0x02	; 2
    176e:	3c 93       	st	X, r19
    1770:	2e 93       	st	-X, r18
    1772:	11 97       	sbiw	r26, 0x01	; 1
    1774:	13 86       	std	Z+11, r1	; 0x0b
    1776:	12 86       	std	Z+10, r1	; 0x0a
    1778:	9c 91       	ld	r25, X
    177a:	91 50       	subi	r25, 0x01	; 1
    177c:	9c 93       	st	X, r25
    177e:	a4 89       	ldd	r26, Z+20	; 0x14
    1780:	b5 89       	ldd	r27, Z+21	; 0x15
    1782:	10 97       	sbiw	r26, 0x00	; 0
    1784:	19 f1       	breq	.+70     	; 0x17cc <xTaskIncrementTick+0x14e>
    1786:	26 85       	ldd	r18, Z+14	; 0x0e
    1788:	37 85       	ldd	r19, Z+15	; 0x0f
    178a:	60 89       	ldd	r22, Z+16	; 0x10
    178c:	71 89       	ldd	r23, Z+17	; 0x11
    178e:	e9 01       	movw	r28, r18
    1790:	7d 83       	std	Y+5, r23	; 0x05
    1792:	6c 83       	std	Y+4, r22	; 0x04
    1794:	20 89       	ldd	r18, Z+16	; 0x10
    1796:	31 89       	ldd	r19, Z+17	; 0x11
    1798:	66 85       	ldd	r22, Z+14	; 0x0e
    179a:	77 85       	ldd	r23, Z+15	; 0x0f
    179c:	e9 01       	movw	r28, r18
    179e:	7b 83       	std	Y+3, r23	; 0x03
    17a0:	6a 83       	std	Y+2, r22	; 0x02
    17a2:	11 96       	adiw	r26, 0x01	; 1
    17a4:	6d 91       	ld	r22, X+
    17a6:	7c 91       	ld	r23, X
    17a8:	12 97       	sbiw	r26, 0x02	; 2
    17aa:	9f 01       	movw	r18, r30
    17ac:	24 5f       	subi	r18, 0xF4	; 244
    17ae:	3f 4f       	sbci	r19, 0xFF	; 255
    17b0:	62 17       	cp	r22, r18
    17b2:	73 07       	cpc	r23, r19
    17b4:	31 f4       	brne	.+12     	; 0x17c2 <xTaskIncrementTick+0x144>
    17b6:	20 89       	ldd	r18, Z+16	; 0x10
    17b8:	31 89       	ldd	r19, Z+17	; 0x11
    17ba:	12 96       	adiw	r26, 0x02	; 2
    17bc:	3c 93       	st	X, r19
    17be:	2e 93       	st	-X, r18
    17c0:	11 97       	sbiw	r26, 0x01	; 1
    17c2:	15 8a       	std	Z+21, r1	; 0x15
    17c4:	14 8a       	std	Z+20, r1	; 0x14
    17c6:	9c 91       	ld	r25, X
    17c8:	91 50       	subi	r25, 0x01	; 1
    17ca:	9c 93       	st	X, r25
    17cc:	26 89       	ldd	r18, Z+22	; 0x16
    17ce:	90 91 4d 07 	lds	r25, 0x074D	; 0x80074d <uxTopReadyPriority>
    17d2:	92 17       	cp	r25, r18
    17d4:	10 f4       	brcc	.+4      	; 0x17da <xTaskIncrementTick+0x15c>
    17d6:	20 93 4d 07 	sts	0x074D, r18	; 0x80074d <uxTopReadyPriority>
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	d9 01       	movw	r26, r18
    17de:	aa 0f       	add	r26, r26
    17e0:	bb 1f       	adc	r27, r27
    17e2:	aa 0f       	add	r26, r26
    17e4:	bb 1f       	adc	r27, r27
    17e6:	aa 0f       	add	r26, r26
    17e8:	bb 1f       	adc	r27, r27
    17ea:	2a 0f       	add	r18, r26
    17ec:	3b 1f       	adc	r19, r27
    17ee:	d9 01       	movw	r26, r18
    17f0:	a6 58       	subi	r26, 0x86	; 134
    17f2:	b8 4f       	sbci	r27, 0xF8	; 248
    17f4:	11 96       	adiw	r26, 0x01	; 1
    17f6:	0d 90       	ld	r0, X+
    17f8:	bc 91       	ld	r27, X
    17fa:	a0 2d       	mov	r26, r0
    17fc:	b5 83       	std	Z+5, r27	; 0x05
    17fe:	a4 83       	std	Z+4, r26	; 0x04
    1800:	14 96       	adiw	r26, 0x04	; 4
    1802:	2d 91       	ld	r18, X+
    1804:	3c 91       	ld	r19, X
    1806:	15 97       	sbiw	r26, 0x05	; 5
    1808:	37 83       	std	Z+7, r19	; 0x07
    180a:	26 83       	std	Z+6, r18	; 0x06
    180c:	14 96       	adiw	r26, 0x04	; 4
    180e:	2d 91       	ld	r18, X+
    1810:	3c 91       	ld	r19, X
    1812:	15 97       	sbiw	r26, 0x05	; 5
    1814:	e9 01       	movw	r28, r18
    1816:	5b 83       	std	Y+3, r21	; 0x03
    1818:	4a 83       	std	Y+2, r20	; 0x02
    181a:	15 96       	adiw	r26, 0x05	; 5
    181c:	5c 93       	st	X, r21
    181e:	4e 93       	st	-X, r20
    1820:	14 97       	sbiw	r26, 0x04	; 4
    1822:	a6 89       	ldd	r26, Z+22	; 0x16
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	9d 01       	movw	r18, r26
    1828:	22 0f       	add	r18, r18
    182a:	33 1f       	adc	r19, r19
    182c:	22 0f       	add	r18, r18
    182e:	33 1f       	adc	r19, r19
    1830:	22 0f       	add	r18, r18
    1832:	33 1f       	adc	r19, r19
    1834:	a2 0f       	add	r26, r18
    1836:	b3 1f       	adc	r27, r19
    1838:	a6 58       	subi	r26, 0x86	; 134
    183a:	b8 4f       	sbci	r27, 0xF8	; 248
    183c:	b3 87       	std	Z+11, r27	; 0x0b
    183e:	a2 87       	std	Z+10, r26	; 0x0a
    1840:	9c 91       	ld	r25, X
    1842:	9f 5f       	subi	r25, 0xFF	; 255
    1844:	9c 93       	st	X, r25
    1846:	26 89       	ldd	r18, Z+22	; 0x16
    1848:	e0 91 9e 07 	lds	r30, 0x079E	; 0x80079e <pxCurrentTCB>
    184c:	f0 91 9f 07 	lds	r31, 0x079F	; 0x80079f <pxCurrentTCB+0x1>
    1850:	96 89       	ldd	r25, Z+22	; 0x16
    1852:	29 17       	cp	r18, r25
    1854:	08 f0       	brcs	.+2      	; 0x1858 <xTaskIncrementTick+0x1da>
    1856:	49 cf       	rjmp	.-366    	; 0x16ea <xTaskIncrementTick+0x6c>
    1858:	4b cf       	rjmp	.-362    	; 0x16f0 <xTaskIncrementTick+0x72>
    185a:	e0 91 9e 07 	lds	r30, 0x079E	; 0x80079e <pxCurrentTCB>
    185e:	f0 91 9f 07 	lds	r31, 0x079F	; 0x80079f <pxCurrentTCB+0x1>
    1862:	26 89       	ldd	r18, Z+22	; 0x16
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	f9 01       	movw	r30, r18
    1868:	ee 0f       	add	r30, r30
    186a:	ff 1f       	adc	r31, r31
    186c:	ee 0f       	add	r30, r30
    186e:	ff 1f       	adc	r31, r31
    1870:	ee 0f       	add	r30, r30
    1872:	ff 1f       	adc	r31, r31
    1874:	2e 0f       	add	r18, r30
    1876:	3f 1f       	adc	r19, r31
    1878:	f9 01       	movw	r30, r18
    187a:	e6 58       	subi	r30, 0x86	; 134
    187c:	f8 4f       	sbci	r31, 0xF8	; 248
    187e:	90 81       	ld	r25, Z
    1880:	92 30       	cpi	r25, 0x02	; 2
    1882:	08 f0       	brcs	.+2      	; 0x1886 <xTaskIncrementTick+0x208>
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	90 91 49 07 	lds	r25, 0x0749	; 0x800749 <xYieldPending>
    188a:	91 11       	cpse	r25, r1
    188c:	0c c0       	rjmp	.+24     	; 0x18a6 <xTaskIncrementTick+0x228>
    188e:	0c c0       	rjmp	.+24     	; 0x18a8 <xTaskIncrementTick+0x22a>
    1890:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <xPendedTicks>
    1894:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <xPendedTicks+0x1>
    1898:	01 96       	adiw	r24, 0x01	; 1
    189a:	90 93 4b 07 	sts	0x074B, r25	; 0x80074b <xPendedTicks+0x1>
    189e:	80 93 4a 07 	sts	0x074A, r24	; 0x80074a <xPendedTicks>
    18a2:	80 e0       	ldi	r24, 0x00	; 0
    18a4:	01 c0       	rjmp	.+2      	; 0x18a8 <xTaskIncrementTick+0x22a>
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	df 91       	pop	r29
    18aa:	cf 91       	pop	r28
    18ac:	1f 91       	pop	r17
    18ae:	0f 91       	pop	r16
    18b0:	08 95       	ret

000018b2 <xTaskResumeAll>:
    18b2:	cf 93       	push	r28
    18b4:	df 93       	push	r29
    18b6:	0f b6       	in	r0, 0x3f	; 63
    18b8:	f8 94       	cli
    18ba:	0f 92       	push	r0
    18bc:	80 91 42 07 	lds	r24, 0x0742	; 0x800742 <uxSchedulerSuspended>
    18c0:	81 50       	subi	r24, 0x01	; 1
    18c2:	80 93 42 07 	sts	0x0742, r24	; 0x800742 <uxSchedulerSuspended>
    18c6:	80 91 42 07 	lds	r24, 0x0742	; 0x800742 <uxSchedulerSuspended>
    18ca:	81 11       	cpse	r24, r1
    18cc:	bf c0       	rjmp	.+382    	; 0x1a4c <xTaskResumeAll+0x19a>
    18ce:	80 91 50 07 	lds	r24, 0x0750	; 0x800750 <uxCurrentNumberOfTasks>
    18d2:	81 11       	cpse	r24, r1
    18d4:	96 c0       	rjmp	.+300    	; 0x1a02 <xTaskResumeAll+0x150>
    18d6:	bd c0       	rjmp	.+378    	; 0x1a52 <xTaskResumeAll+0x1a0>
    18d8:	e0 91 60 07 	lds	r30, 0x0760	; 0x800760 <xPendingReadyList+0x5>
    18dc:	f0 91 61 07 	lds	r31, 0x0761	; 0x800761 <xPendingReadyList+0x6>
    18e0:	06 80       	ldd	r0, Z+6	; 0x06
    18e2:	f7 81       	ldd	r31, Z+7	; 0x07
    18e4:	e0 2d       	mov	r30, r0
    18e6:	a4 89       	ldd	r26, Z+20	; 0x14
    18e8:	b5 89       	ldd	r27, Z+21	; 0x15
    18ea:	c6 85       	ldd	r28, Z+14	; 0x0e
    18ec:	d7 85       	ldd	r29, Z+15	; 0x0f
    18ee:	80 89       	ldd	r24, Z+16	; 0x10
    18f0:	91 89       	ldd	r25, Z+17	; 0x11
    18f2:	9d 83       	std	Y+5, r25	; 0x05
    18f4:	8c 83       	std	Y+4, r24	; 0x04
    18f6:	c0 89       	ldd	r28, Z+16	; 0x10
    18f8:	d1 89       	ldd	r29, Z+17	; 0x11
    18fa:	86 85       	ldd	r24, Z+14	; 0x0e
    18fc:	97 85       	ldd	r25, Z+15	; 0x0f
    18fe:	9b 83       	std	Y+3, r25	; 0x03
    1900:	8a 83       	std	Y+2, r24	; 0x02
    1902:	11 96       	adiw	r26, 0x01	; 1
    1904:	2d 91       	ld	r18, X+
    1906:	3c 91       	ld	r19, X
    1908:	12 97       	sbiw	r26, 0x02	; 2
    190a:	cf 01       	movw	r24, r30
    190c:	0c 96       	adiw	r24, 0x0c	; 12
    190e:	28 17       	cp	r18, r24
    1910:	39 07       	cpc	r19, r25
    1912:	31 f4       	brne	.+12     	; 0x1920 <xTaskResumeAll+0x6e>
    1914:	80 89       	ldd	r24, Z+16	; 0x10
    1916:	91 89       	ldd	r25, Z+17	; 0x11
    1918:	12 96       	adiw	r26, 0x02	; 2
    191a:	9c 93       	st	X, r25
    191c:	8e 93       	st	-X, r24
    191e:	11 97       	sbiw	r26, 0x01	; 1
    1920:	15 8a       	std	Z+21, r1	; 0x15
    1922:	14 8a       	std	Z+20, r1	; 0x14
    1924:	8c 91       	ld	r24, X
    1926:	81 50       	subi	r24, 0x01	; 1
    1928:	8c 93       	st	X, r24
    192a:	a2 85       	ldd	r26, Z+10	; 0x0a
    192c:	b3 85       	ldd	r27, Z+11	; 0x0b
    192e:	c4 81       	ldd	r28, Z+4	; 0x04
    1930:	d5 81       	ldd	r29, Z+5	; 0x05
    1932:	86 81       	ldd	r24, Z+6	; 0x06
    1934:	97 81       	ldd	r25, Z+7	; 0x07
    1936:	9d 83       	std	Y+5, r25	; 0x05
    1938:	8c 83       	std	Y+4, r24	; 0x04
    193a:	c6 81       	ldd	r28, Z+6	; 0x06
    193c:	d7 81       	ldd	r29, Z+7	; 0x07
    193e:	84 81       	ldd	r24, Z+4	; 0x04
    1940:	95 81       	ldd	r25, Z+5	; 0x05
    1942:	9b 83       	std	Y+3, r25	; 0x03
    1944:	8a 83       	std	Y+2, r24	; 0x02
    1946:	11 96       	adiw	r26, 0x01	; 1
    1948:	8d 91       	ld	r24, X+
    194a:	9c 91       	ld	r25, X
    194c:	12 97       	sbiw	r26, 0x02	; 2
    194e:	9f 01       	movw	r18, r30
    1950:	2e 5f       	subi	r18, 0xFE	; 254
    1952:	3f 4f       	sbci	r19, 0xFF	; 255
    1954:	82 17       	cp	r24, r18
    1956:	93 07       	cpc	r25, r19
    1958:	31 f4       	brne	.+12     	; 0x1966 <xTaskResumeAll+0xb4>
    195a:	86 81       	ldd	r24, Z+6	; 0x06
    195c:	97 81       	ldd	r25, Z+7	; 0x07
    195e:	12 96       	adiw	r26, 0x02	; 2
    1960:	9c 93       	st	X, r25
    1962:	8e 93       	st	-X, r24
    1964:	11 97       	sbiw	r26, 0x01	; 1
    1966:	13 86       	std	Z+11, r1	; 0x0b
    1968:	12 86       	std	Z+10, r1	; 0x0a
    196a:	8c 91       	ld	r24, X
    196c:	81 50       	subi	r24, 0x01	; 1
    196e:	8c 93       	st	X, r24
    1970:	86 89       	ldd	r24, Z+22	; 0x16
    1972:	90 91 4d 07 	lds	r25, 0x074D	; 0x80074d <uxTopReadyPriority>
    1976:	98 17       	cp	r25, r24
    1978:	10 f4       	brcc	.+4      	; 0x197e <xTaskResumeAll+0xcc>
    197a:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <uxTopReadyPriority>
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	dc 01       	movw	r26, r24
    1982:	aa 0f       	add	r26, r26
    1984:	bb 1f       	adc	r27, r27
    1986:	aa 0f       	add	r26, r26
    1988:	bb 1f       	adc	r27, r27
    198a:	aa 0f       	add	r26, r26
    198c:	bb 1f       	adc	r27, r27
    198e:	8a 0f       	add	r24, r26
    1990:	9b 1f       	adc	r25, r27
    1992:	dc 01       	movw	r26, r24
    1994:	a6 58       	subi	r26, 0x86	; 134
    1996:	b8 4f       	sbci	r27, 0xF8	; 248
    1998:	11 96       	adiw	r26, 0x01	; 1
    199a:	0d 90       	ld	r0, X+
    199c:	bc 91       	ld	r27, X
    199e:	a0 2d       	mov	r26, r0
    19a0:	b5 83       	std	Z+5, r27	; 0x05
    19a2:	a4 83       	std	Z+4, r26	; 0x04
    19a4:	14 96       	adiw	r26, 0x04	; 4
    19a6:	8d 91       	ld	r24, X+
    19a8:	9c 91       	ld	r25, X
    19aa:	15 97       	sbiw	r26, 0x05	; 5
    19ac:	97 83       	std	Z+7, r25	; 0x07
    19ae:	86 83       	std	Z+6, r24	; 0x06
    19b0:	14 96       	adiw	r26, 0x04	; 4
    19b2:	cd 91       	ld	r28, X+
    19b4:	dc 91       	ld	r29, X
    19b6:	15 97       	sbiw	r26, 0x05	; 5
    19b8:	3b 83       	std	Y+3, r19	; 0x03
    19ba:	2a 83       	std	Y+2, r18	; 0x02
    19bc:	15 96       	adiw	r26, 0x05	; 5
    19be:	3c 93       	st	X, r19
    19c0:	2e 93       	st	-X, r18
    19c2:	14 97       	sbiw	r26, 0x04	; 4
    19c4:	a6 89       	ldd	r26, Z+22	; 0x16
    19c6:	b0 e0       	ldi	r27, 0x00	; 0
    19c8:	cd 01       	movw	r24, r26
    19ca:	88 0f       	add	r24, r24
    19cc:	99 1f       	adc	r25, r25
    19ce:	88 0f       	add	r24, r24
    19d0:	99 1f       	adc	r25, r25
    19d2:	88 0f       	add	r24, r24
    19d4:	99 1f       	adc	r25, r25
    19d6:	a8 0f       	add	r26, r24
    19d8:	b9 1f       	adc	r27, r25
    19da:	a6 58       	subi	r26, 0x86	; 134
    19dc:	b8 4f       	sbci	r27, 0xF8	; 248
    19de:	b3 87       	std	Z+11, r27	; 0x0b
    19e0:	a2 87       	std	Z+10, r26	; 0x0a
    19e2:	8c 91       	ld	r24, X
    19e4:	8f 5f       	subi	r24, 0xFF	; 255
    19e6:	8c 93       	st	X, r24
    19e8:	96 89       	ldd	r25, Z+22	; 0x16
    19ea:	a0 91 9e 07 	lds	r26, 0x079E	; 0x80079e <pxCurrentTCB>
    19ee:	b0 91 9f 07 	lds	r27, 0x079F	; 0x80079f <pxCurrentTCB+0x1>
    19f2:	56 96       	adiw	r26, 0x16	; 22
    19f4:	8c 91       	ld	r24, X
    19f6:	98 17       	cp	r25, r24
    19f8:	30 f0       	brcs	.+12     	; 0x1a06 <xTaskResumeAll+0x154>
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	80 93 49 07 	sts	0x0749, r24	; 0x800749 <xYieldPending>
    1a00:	02 c0       	rjmp	.+4      	; 0x1a06 <xTaskResumeAll+0x154>
    1a02:	e0 e0       	ldi	r30, 0x00	; 0
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	80 91 5b 07 	lds	r24, 0x075B	; 0x80075b <xPendingReadyList>
    1a0a:	81 11       	cpse	r24, r1
    1a0c:	65 cf       	rjmp	.-310    	; 0x18d8 <xTaskResumeAll+0x26>
    1a0e:	ef 2b       	or	r30, r31
    1a10:	11 f0       	breq	.+4      	; 0x1a16 <xTaskResumeAll+0x164>
    1a12:	0e 94 ef 08 	call	0x11de	; 0x11de <prvResetNextTaskUnblockTime>
    1a16:	c0 91 4a 07 	lds	r28, 0x074A	; 0x80074a <xPendedTicks>
    1a1a:	d0 91 4b 07 	lds	r29, 0x074B	; 0x80074b <xPendedTicks+0x1>
    1a1e:	20 97       	sbiw	r28, 0x00	; 0
    1a20:	69 f0       	breq	.+26     	; 0x1a3c <xTaskResumeAll+0x18a>
    1a22:	0e 94 3f 0b 	call	0x167e	; 0x167e <xTaskIncrementTick>
    1a26:	88 23       	and	r24, r24
    1a28:	19 f0       	breq	.+6      	; 0x1a30 <xTaskResumeAll+0x17e>
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	80 93 49 07 	sts	0x0749, r24	; 0x800749 <xYieldPending>
    1a30:	21 97       	sbiw	r28, 0x01	; 1
    1a32:	b9 f7       	brne	.-18     	; 0x1a22 <xTaskResumeAll+0x170>
    1a34:	10 92 4b 07 	sts	0x074B, r1	; 0x80074b <xPendedTicks+0x1>
    1a38:	10 92 4a 07 	sts	0x074A, r1	; 0x80074a <xPendedTicks>
    1a3c:	80 91 49 07 	lds	r24, 0x0749	; 0x800749 <xYieldPending>
    1a40:	88 23       	and	r24, r24
    1a42:	31 f0       	breq	.+12     	; 0x1a50 <xTaskResumeAll+0x19e>
    1a44:	0e 94 d6 05 	call	0xbac	; 0xbac <vPortYield>
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	03 c0       	rjmp	.+6      	; 0x1a52 <xTaskResumeAll+0x1a0>
    1a4c:	80 e0       	ldi	r24, 0x00	; 0
    1a4e:	01 c0       	rjmp	.+2      	; 0x1a52 <xTaskResumeAll+0x1a0>
    1a50:	80 e0       	ldi	r24, 0x00	; 0
    1a52:	0f 90       	pop	r0
    1a54:	0f be       	out	0x3f, r0	; 63
    1a56:	df 91       	pop	r29
    1a58:	cf 91       	pop	r28
    1a5a:	08 95       	ret

00001a5c <vTaskDelay>:
    1a5c:	cf 93       	push	r28
    1a5e:	df 93       	push	r29
    1a60:	ec 01       	movw	r28, r24
    1a62:	89 2b       	or	r24, r25
    1a64:	49 f0       	breq	.+18     	; 0x1a78 <vTaskDelay+0x1c>
    1a66:	0e 94 39 0b 	call	0x1672	; 0x1672 <vTaskSuspendAll>
    1a6a:	60 e0       	ldi	r22, 0x00	; 0
    1a6c:	ce 01       	movw	r24, r28
    1a6e:	0e 94 75 0a 	call	0x14ea	; 0x14ea <prvAddCurrentTaskToDelayedList>
    1a72:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <xTaskResumeAll>
    1a76:	01 c0       	rjmp	.+2      	; 0x1a7a <vTaskDelay+0x1e>
    1a78:	80 e0       	ldi	r24, 0x00	; 0
    1a7a:	81 11       	cpse	r24, r1
    1a7c:	02 c0       	rjmp	.+4      	; 0x1a82 <vTaskDelay+0x26>
    1a7e:	0e 94 d6 05 	call	0xbac	; 0xbac <vPortYield>
    1a82:	df 91       	pop	r29
    1a84:	cf 91       	pop	r28
    1a86:	08 95       	ret

00001a88 <vTaskSwitchContext>:
    1a88:	80 91 42 07 	lds	r24, 0x0742	; 0x800742 <uxSchedulerSuspended>
    1a8c:	88 23       	and	r24, r24
    1a8e:	21 f0       	breq	.+8      	; 0x1a98 <vTaskSwitchContext+0x10>
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	80 93 49 07 	sts	0x0749, r24	; 0x800749 <xYieldPending>
    1a96:	08 95       	ret
    1a98:	10 92 49 07 	sts	0x0749, r1	; 0x800749 <xYieldPending>
    1a9c:	20 91 4d 07 	lds	r18, 0x074D	; 0x80074d <uxTopReadyPriority>
    1aa0:	01 c0       	rjmp	.+2      	; 0x1aa4 <vTaskSwitchContext+0x1c>
    1aa2:	21 50       	subi	r18, 0x01	; 1
    1aa4:	82 2f       	mov	r24, r18
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	fc 01       	movw	r30, r24
    1aaa:	ee 0f       	add	r30, r30
    1aac:	ff 1f       	adc	r31, r31
    1aae:	ee 0f       	add	r30, r30
    1ab0:	ff 1f       	adc	r31, r31
    1ab2:	ee 0f       	add	r30, r30
    1ab4:	ff 1f       	adc	r31, r31
    1ab6:	e8 0f       	add	r30, r24
    1ab8:	f9 1f       	adc	r31, r25
    1aba:	e6 58       	subi	r30, 0x86	; 134
    1abc:	f8 4f       	sbci	r31, 0xF8	; 248
    1abe:	30 81       	ld	r19, Z
    1ac0:	33 23       	and	r19, r19
    1ac2:	79 f3       	breq	.-34     	; 0x1aa2 <vTaskSwitchContext+0x1a>
    1ac4:	ac 01       	movw	r20, r24
    1ac6:	44 0f       	add	r20, r20
    1ac8:	55 1f       	adc	r21, r21
    1aca:	44 0f       	add	r20, r20
    1acc:	55 1f       	adc	r21, r21
    1ace:	44 0f       	add	r20, r20
    1ad0:	55 1f       	adc	r21, r21
    1ad2:	48 0f       	add	r20, r24
    1ad4:	59 1f       	adc	r21, r25
    1ad6:	df 01       	movw	r26, r30
    1ad8:	01 80       	ldd	r0, Z+1	; 0x01
    1ada:	f2 81       	ldd	r31, Z+2	; 0x02
    1adc:	e0 2d       	mov	r30, r0
    1ade:	02 80       	ldd	r0, Z+2	; 0x02
    1ae0:	f3 81       	ldd	r31, Z+3	; 0x03
    1ae2:	e0 2d       	mov	r30, r0
    1ae4:	12 96       	adiw	r26, 0x02	; 2
    1ae6:	fc 93       	st	X, r31
    1ae8:	ee 93       	st	-X, r30
    1aea:	11 97       	sbiw	r26, 0x01	; 1
    1aec:	43 58       	subi	r20, 0x83	; 131
    1aee:	58 4f       	sbci	r21, 0xF8	; 248
    1af0:	e4 17       	cp	r30, r20
    1af2:	f5 07       	cpc	r31, r21
    1af4:	29 f4       	brne	.+10     	; 0x1b00 <vTaskSwitchContext+0x78>
    1af6:	42 81       	ldd	r20, Z+2	; 0x02
    1af8:	53 81       	ldd	r21, Z+3	; 0x03
    1afa:	fd 01       	movw	r30, r26
    1afc:	52 83       	std	Z+2, r21	; 0x02
    1afe:	41 83       	std	Z+1, r20	; 0x01
    1b00:	fc 01       	movw	r30, r24
    1b02:	ee 0f       	add	r30, r30
    1b04:	ff 1f       	adc	r31, r31
    1b06:	ee 0f       	add	r30, r30
    1b08:	ff 1f       	adc	r31, r31
    1b0a:	ee 0f       	add	r30, r30
    1b0c:	ff 1f       	adc	r31, r31
    1b0e:	8e 0f       	add	r24, r30
    1b10:	9f 1f       	adc	r25, r31
    1b12:	fc 01       	movw	r30, r24
    1b14:	e6 58       	subi	r30, 0x86	; 134
    1b16:	f8 4f       	sbci	r31, 0xF8	; 248
    1b18:	01 80       	ldd	r0, Z+1	; 0x01
    1b1a:	f2 81       	ldd	r31, Z+2	; 0x02
    1b1c:	e0 2d       	mov	r30, r0
    1b1e:	86 81       	ldd	r24, Z+6	; 0x06
    1b20:	97 81       	ldd	r25, Z+7	; 0x07
    1b22:	90 93 9f 07 	sts	0x079F, r25	; 0x80079f <pxCurrentTCB+0x1>
    1b26:	80 93 9e 07 	sts	0x079E, r24	; 0x80079e <pxCurrentTCB>
    1b2a:	20 93 4d 07 	sts	0x074D, r18	; 0x80074d <uxTopReadyPriority>
    1b2e:	08 95       	ret

00001b30 <vTaskPlaceOnEventList>:
    1b30:	cf 93       	push	r28
    1b32:	df 93       	push	r29
    1b34:	eb 01       	movw	r28, r22
    1b36:	60 91 9e 07 	lds	r22, 0x079E	; 0x80079e <pxCurrentTCB>
    1b3a:	70 91 9f 07 	lds	r23, 0x079F	; 0x80079f <pxCurrentTCB+0x1>
    1b3e:	64 5f       	subi	r22, 0xF4	; 244
    1b40:	7f 4f       	sbci	r23, 0xFF	; 255
    1b42:	0e 94 db 04 	call	0x9b6	; 0x9b6 <vListInsert>
    1b46:	61 e0       	ldi	r22, 0x01	; 1
    1b48:	ce 01       	movw	r24, r28
    1b4a:	0e 94 75 0a 	call	0x14ea	; 0x14ea <prvAddCurrentTaskToDelayedList>
    1b4e:	df 91       	pop	r29
    1b50:	cf 91       	pop	r28
    1b52:	08 95       	ret

00001b54 <xTaskRemoveFromEventList>:
    1b54:	cf 93       	push	r28
    1b56:	df 93       	push	r29
    1b58:	dc 01       	movw	r26, r24
    1b5a:	15 96       	adiw	r26, 0x05	; 5
    1b5c:	ed 91       	ld	r30, X+
    1b5e:	fc 91       	ld	r31, X
    1b60:	16 97       	sbiw	r26, 0x06	; 6
    1b62:	06 80       	ldd	r0, Z+6	; 0x06
    1b64:	f7 81       	ldd	r31, Z+7	; 0x07
    1b66:	e0 2d       	mov	r30, r0
    1b68:	a4 89       	ldd	r26, Z+20	; 0x14
    1b6a:	b5 89       	ldd	r27, Z+21	; 0x15
    1b6c:	c6 85       	ldd	r28, Z+14	; 0x0e
    1b6e:	d7 85       	ldd	r29, Z+15	; 0x0f
    1b70:	80 89       	ldd	r24, Z+16	; 0x10
    1b72:	91 89       	ldd	r25, Z+17	; 0x11
    1b74:	9d 83       	std	Y+5, r25	; 0x05
    1b76:	8c 83       	std	Y+4, r24	; 0x04
    1b78:	c0 89       	ldd	r28, Z+16	; 0x10
    1b7a:	d1 89       	ldd	r29, Z+17	; 0x11
    1b7c:	86 85       	ldd	r24, Z+14	; 0x0e
    1b7e:	97 85       	ldd	r25, Z+15	; 0x0f
    1b80:	9b 83       	std	Y+3, r25	; 0x03
    1b82:	8a 83       	std	Y+2, r24	; 0x02
    1b84:	11 96       	adiw	r26, 0x01	; 1
    1b86:	8d 91       	ld	r24, X+
    1b88:	9c 91       	ld	r25, X
    1b8a:	12 97       	sbiw	r26, 0x02	; 2
    1b8c:	9f 01       	movw	r18, r30
    1b8e:	24 5f       	subi	r18, 0xF4	; 244
    1b90:	3f 4f       	sbci	r19, 0xFF	; 255
    1b92:	82 17       	cp	r24, r18
    1b94:	93 07       	cpc	r25, r19
    1b96:	31 f4       	brne	.+12     	; 0x1ba4 <xTaskRemoveFromEventList+0x50>
    1b98:	80 89       	ldd	r24, Z+16	; 0x10
    1b9a:	91 89       	ldd	r25, Z+17	; 0x11
    1b9c:	12 96       	adiw	r26, 0x02	; 2
    1b9e:	9c 93       	st	X, r25
    1ba0:	8e 93       	st	-X, r24
    1ba2:	11 97       	sbiw	r26, 0x01	; 1
    1ba4:	15 8a       	std	Z+21, r1	; 0x15
    1ba6:	14 8a       	std	Z+20, r1	; 0x14
    1ba8:	8c 91       	ld	r24, X
    1baa:	81 50       	subi	r24, 0x01	; 1
    1bac:	8c 93       	st	X, r24
    1bae:	80 91 42 07 	lds	r24, 0x0742	; 0x800742 <uxSchedulerSuspended>
    1bb2:	81 11       	cpse	r24, r1
    1bb4:	60 c0       	rjmp	.+192    	; 0x1c76 <xTaskRemoveFromEventList+0x122>
    1bb6:	a2 85       	ldd	r26, Z+10	; 0x0a
    1bb8:	b3 85       	ldd	r27, Z+11	; 0x0b
    1bba:	c4 81       	ldd	r28, Z+4	; 0x04
    1bbc:	d5 81       	ldd	r29, Z+5	; 0x05
    1bbe:	86 81       	ldd	r24, Z+6	; 0x06
    1bc0:	97 81       	ldd	r25, Z+7	; 0x07
    1bc2:	9d 83       	std	Y+5, r25	; 0x05
    1bc4:	8c 83       	std	Y+4, r24	; 0x04
    1bc6:	c6 81       	ldd	r28, Z+6	; 0x06
    1bc8:	d7 81       	ldd	r29, Z+7	; 0x07
    1bca:	84 81       	ldd	r24, Z+4	; 0x04
    1bcc:	95 81       	ldd	r25, Z+5	; 0x05
    1bce:	9b 83       	std	Y+3, r25	; 0x03
    1bd0:	8a 83       	std	Y+2, r24	; 0x02
    1bd2:	11 96       	adiw	r26, 0x01	; 1
    1bd4:	8d 91       	ld	r24, X+
    1bd6:	9c 91       	ld	r25, X
    1bd8:	12 97       	sbiw	r26, 0x02	; 2
    1bda:	9f 01       	movw	r18, r30
    1bdc:	2e 5f       	subi	r18, 0xFE	; 254
    1bde:	3f 4f       	sbci	r19, 0xFF	; 255
    1be0:	82 17       	cp	r24, r18
    1be2:	93 07       	cpc	r25, r19
    1be4:	31 f4       	brne	.+12     	; 0x1bf2 <xTaskRemoveFromEventList+0x9e>
    1be6:	86 81       	ldd	r24, Z+6	; 0x06
    1be8:	97 81       	ldd	r25, Z+7	; 0x07
    1bea:	12 96       	adiw	r26, 0x02	; 2
    1bec:	9c 93       	st	X, r25
    1bee:	8e 93       	st	-X, r24
    1bf0:	11 97       	sbiw	r26, 0x01	; 1
    1bf2:	13 86       	std	Z+11, r1	; 0x0b
    1bf4:	12 86       	std	Z+10, r1	; 0x0a
    1bf6:	8c 91       	ld	r24, X
    1bf8:	81 50       	subi	r24, 0x01	; 1
    1bfa:	8c 93       	st	X, r24
    1bfc:	86 89       	ldd	r24, Z+22	; 0x16
    1bfe:	90 91 4d 07 	lds	r25, 0x074D	; 0x80074d <uxTopReadyPriority>
    1c02:	98 17       	cp	r25, r24
    1c04:	10 f4       	brcc	.+4      	; 0x1c0a <xTaskRemoveFromEventList+0xb6>
    1c06:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <uxTopReadyPriority>
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	dc 01       	movw	r26, r24
    1c0e:	aa 0f       	add	r26, r26
    1c10:	bb 1f       	adc	r27, r27
    1c12:	aa 0f       	add	r26, r26
    1c14:	bb 1f       	adc	r27, r27
    1c16:	aa 0f       	add	r26, r26
    1c18:	bb 1f       	adc	r27, r27
    1c1a:	8a 0f       	add	r24, r26
    1c1c:	9b 1f       	adc	r25, r27
    1c1e:	dc 01       	movw	r26, r24
    1c20:	a6 58       	subi	r26, 0x86	; 134
    1c22:	b8 4f       	sbci	r27, 0xF8	; 248
    1c24:	11 96       	adiw	r26, 0x01	; 1
    1c26:	0d 90       	ld	r0, X+
    1c28:	bc 91       	ld	r27, X
    1c2a:	a0 2d       	mov	r26, r0
    1c2c:	b5 83       	std	Z+5, r27	; 0x05
    1c2e:	a4 83       	std	Z+4, r26	; 0x04
    1c30:	14 96       	adiw	r26, 0x04	; 4
    1c32:	8d 91       	ld	r24, X+
    1c34:	9c 91       	ld	r25, X
    1c36:	15 97       	sbiw	r26, 0x05	; 5
    1c38:	97 83       	std	Z+7, r25	; 0x07
    1c3a:	86 83       	std	Z+6, r24	; 0x06
    1c3c:	14 96       	adiw	r26, 0x04	; 4
    1c3e:	cd 91       	ld	r28, X+
    1c40:	dc 91       	ld	r29, X
    1c42:	15 97       	sbiw	r26, 0x05	; 5
    1c44:	3b 83       	std	Y+3, r19	; 0x03
    1c46:	2a 83       	std	Y+2, r18	; 0x02
    1c48:	15 96       	adiw	r26, 0x05	; 5
    1c4a:	3c 93       	st	X, r19
    1c4c:	2e 93       	st	-X, r18
    1c4e:	14 97       	sbiw	r26, 0x04	; 4
    1c50:	a6 89       	ldd	r26, Z+22	; 0x16
    1c52:	b0 e0       	ldi	r27, 0x00	; 0
    1c54:	cd 01       	movw	r24, r26
    1c56:	88 0f       	add	r24, r24
    1c58:	99 1f       	adc	r25, r25
    1c5a:	88 0f       	add	r24, r24
    1c5c:	99 1f       	adc	r25, r25
    1c5e:	88 0f       	add	r24, r24
    1c60:	99 1f       	adc	r25, r25
    1c62:	a8 0f       	add	r26, r24
    1c64:	b9 1f       	adc	r27, r25
    1c66:	a6 58       	subi	r26, 0x86	; 134
    1c68:	b8 4f       	sbci	r27, 0xF8	; 248
    1c6a:	b3 87       	std	Z+11, r27	; 0x0b
    1c6c:	a2 87       	std	Z+10, r26	; 0x0a
    1c6e:	8c 91       	ld	r24, X
    1c70:	8f 5f       	subi	r24, 0xFF	; 255
    1c72:	8c 93       	st	X, r24
    1c74:	1c c0       	rjmp	.+56     	; 0x1cae <xTaskRemoveFromEventList+0x15a>
    1c76:	4b e5       	ldi	r20, 0x5B	; 91
    1c78:	57 e0       	ldi	r21, 0x07	; 7
    1c7a:	da 01       	movw	r26, r20
    1c7c:	11 96       	adiw	r26, 0x01	; 1
    1c7e:	cd 91       	ld	r28, X+
    1c80:	dc 91       	ld	r29, X
    1c82:	12 97       	sbiw	r26, 0x02	; 2
    1c84:	d7 87       	std	Z+15, r29	; 0x0f
    1c86:	c6 87       	std	Z+14, r28	; 0x0e
    1c88:	8c 81       	ldd	r24, Y+4	; 0x04
    1c8a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c8c:	91 8b       	std	Z+17, r25	; 0x11
    1c8e:	80 8b       	std	Z+16, r24	; 0x10
    1c90:	8c 81       	ldd	r24, Y+4	; 0x04
    1c92:	9d 81       	ldd	r25, Y+5	; 0x05
    1c94:	dc 01       	movw	r26, r24
    1c96:	13 96       	adiw	r26, 0x03	; 3
    1c98:	3c 93       	st	X, r19
    1c9a:	2e 93       	st	-X, r18
    1c9c:	12 97       	sbiw	r26, 0x02	; 2
    1c9e:	3d 83       	std	Y+5, r19	; 0x05
    1ca0:	2c 83       	std	Y+4, r18	; 0x04
    1ca2:	55 8b       	std	Z+21, r21	; 0x15
    1ca4:	44 8b       	std	Z+20, r20	; 0x14
    1ca6:	da 01       	movw	r26, r20
    1ca8:	8c 91       	ld	r24, X
    1caa:	8f 5f       	subi	r24, 0xFF	; 255
    1cac:	8c 93       	st	X, r24
    1cae:	96 89       	ldd	r25, Z+22	; 0x16
    1cb0:	e0 91 9e 07 	lds	r30, 0x079E	; 0x80079e <pxCurrentTCB>
    1cb4:	f0 91 9f 07 	lds	r31, 0x079F	; 0x80079f <pxCurrentTCB+0x1>
    1cb8:	86 89       	ldd	r24, Z+22	; 0x16
    1cba:	89 17       	cp	r24, r25
    1cbc:	20 f4       	brcc	.+8      	; 0x1cc6 <xTaskRemoveFromEventList+0x172>
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	80 93 49 07 	sts	0x0749, r24	; 0x800749 <xYieldPending>
    1cc4:	01 c0       	rjmp	.+2      	; 0x1cc8 <xTaskRemoveFromEventList+0x174>
    1cc6:	80 e0       	ldi	r24, 0x00	; 0
    1cc8:	df 91       	pop	r29
    1cca:	cf 91       	pop	r28
    1ccc:	08 95       	ret

00001cce <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
    1cce:	20 91 48 07 	lds	r18, 0x0748	; 0x800748 <xNumOfOverflows>
    1cd2:	fc 01       	movw	r30, r24
    1cd4:	20 83       	st	Z, r18
    pxTimeOut->xTimeOnEntering = xTickCount;
    1cd6:	20 91 4e 07 	lds	r18, 0x074E	; 0x80074e <xTickCount>
    1cda:	30 91 4f 07 	lds	r19, 0x074F	; 0x80074f <xTickCount+0x1>
    1cde:	32 83       	std	Z+2, r19	; 0x02
    1ce0:	21 83       	std	Z+1, r18	; 0x01
    1ce2:	08 95       	ret

00001ce4 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
    1ce4:	cf 93       	push	r28
    1ce6:	df 93       	push	r29
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
    1ce8:	0f b6       	in	r0, 0x3f	; 63
    1cea:	f8 94       	cli
    1cec:	0f 92       	push	r0
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
    1cee:	40 91 4e 07 	lds	r20, 0x074E	; 0x80074e <xTickCount>
    1cf2:	50 91 4f 07 	lds	r21, 0x074F	; 0x80074f <xTickCount+0x1>
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    1cf6:	ec 01       	movw	r28, r24
    1cf8:	29 81       	ldd	r18, Y+1	; 0x01
    1cfa:	3a 81       	ldd	r19, Y+2	; 0x02
    1cfc:	da 01       	movw	r26, r20
    1cfe:	a2 1b       	sub	r26, r18
    1d00:	b3 0b       	sbc	r27, r19
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    1d02:	f8 81       	ld	r31, Y
    1d04:	e0 91 48 07 	lds	r30, 0x0748	; 0x800748 <xNumOfOverflows>
    1d08:	fe 17       	cp	r31, r30
    1d0a:	41 f0       	breq	.+16     	; 0x1d1c <xTaskCheckForTimeOut+0x38>
    1d0c:	42 17       	cp	r20, r18
    1d0e:	53 07       	cpc	r21, r19
    1d10:	28 f0       	brcs	.+10     	; 0x1d1c <xTaskCheckForTimeOut+0x38>
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
            *pxTicksToWait = ( TickType_t ) 0;
    1d12:	fb 01       	movw	r30, r22
    1d14:	11 82       	std	Z+1, r1	; 0x01
    1d16:	10 82       	st	Z, r1
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
    1d18:	81 e0       	ldi	r24, 0x01	; 1
            *pxTicksToWait = ( TickType_t ) 0;
    1d1a:	11 c0       	rjmp	.+34     	; 0x1d3e <xTaskCheckForTimeOut+0x5a>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    1d1c:	eb 01       	movw	r28, r22
    1d1e:	28 81       	ld	r18, Y
    1d20:	39 81       	ldd	r19, Y+1	; 0x01
    1d22:	a2 17       	cp	r26, r18
    1d24:	b3 07       	cpc	r27, r19
    1d26:	40 f4       	brcc	.+16     	; 0x1d38 <xTaskCheckForTimeOut+0x54>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
    1d28:	2a 1b       	sub	r18, r26
    1d2a:	3b 0b       	sbc	r19, r27
    1d2c:	39 83       	std	Y+1, r19	; 0x01
    1d2e:	28 83       	st	Y, r18
            vTaskInternalSetTimeOutState( pxTimeOut );
    1d30:	0e 94 67 0e 	call	0x1cce	; 0x1cce <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
    1d34:	80 e0       	ldi	r24, 0x00	; 0
    1d36:	03 c0       	rjmp	.+6      	; 0x1d3e <xTaskCheckForTimeOut+0x5a>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
    1d38:	19 82       	std	Y+1, r1	; 0x01
    1d3a:	18 82       	st	Y, r1
            xReturn = pdTRUE;
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
    taskEXIT_CRITICAL();
    1d3e:	0f 90       	pop	r0
    1d40:	0f be       	out	0x3f, r0	; 63

    return xReturn;
}
    1d42:	df 91       	pop	r29
    1d44:	cf 91       	pop	r28
    1d46:	08 95       	ret

00001d48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    xYieldPending = pdTRUE;
    1d48:	81 e0       	ldi	r24, 0x01	; 1
    1d4a:	80 93 49 07 	sts	0x0749, r24	; 0x800749 <xYieldPending>
    1d4e:	08 95       	ret

00001d50 <LCD_1>:
void LCD_1(void* pv)
{
	while(1)
	{
		/*Take Semaphore*/
		if(xSemaphoreTake(LCD_Semp,portMAX_DELAY)== pdTRUE)
    1d50:	6f ef       	ldi	r22, 0xFF	; 255
    1d52:	7f ef       	ldi	r23, 0xFF	; 255
    1d54:	80 91 a0 07 	lds	r24, 0x07A0	; 0x8007a0 <LCD_Semp>
    1d58:	90 91 a1 07 	lds	r25, 0x07A1	; 0x8007a1 <LCD_Semp+0x1>
    1d5c:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <xQueueSemaphoreTake>
    1d60:	81 30       	cpi	r24, 0x01	; 1
    1d62:	b1 f7       	brne	.-20     	; 0x1d50 <LCD_1>
		{
			LCD_Print("I'm Task 1");
    1d64:	86 e6       	ldi	r24, 0x66	; 102
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	0e 94 c1 01 	call	0x382	; 0x382 <LCD_Print>
			xSemaphoreGive(LCD_Semp);
    1d6c:	20 e0       	ldi	r18, 0x00	; 0
    1d6e:	40 e0       	ldi	r20, 0x00	; 0
    1d70:	50 e0       	ldi	r21, 0x00	; 0
    1d72:	60 e0       	ldi	r22, 0x00	; 0
    1d74:	70 e0       	ldi	r23, 0x00	; 0
    1d76:	80 91 a0 07 	lds	r24, 0x07A0	; 0x8007a0 <LCD_Semp>
    1d7a:	90 91 a1 07 	lds	r25, 0x07A1	; 0x8007a1 <LCD_Semp+0x1>
    1d7e:	0e 94 da 07 	call	0xfb4	; 0xfb4 <xQueueGenericSend>
			vTaskDelay(1000);
    1d82:	88 ee       	ldi	r24, 0xE8	; 232
    1d84:	93 e0       	ldi	r25, 0x03	; 3
    1d86:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <vTaskDelay>
    1d8a:	e2 cf       	rjmp	.-60     	; 0x1d50 <LCD_1>

00001d8c <LCD_2>:
void LCD_2(void* pv)
{
	while(1)
	{
		/*Take Semaphore*/
		if(xSemaphoreTake(LCD_Semp,portMAX_DELAY)== pdTRUE)
    1d8c:	6f ef       	ldi	r22, 0xFF	; 255
    1d8e:	7f ef       	ldi	r23, 0xFF	; 255
    1d90:	80 91 a0 07 	lds	r24, 0x07A0	; 0x8007a0 <LCD_Semp>
    1d94:	90 91 a1 07 	lds	r25, 0x07A1	; 0x8007a1 <LCD_Semp+0x1>
    1d98:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <xQueueSemaphoreTake>
    1d9c:	81 30       	cpi	r24, 0x01	; 1
    1d9e:	b1 f7       	brne	.-20     	; 0x1d8c <LCD_2>
		{
			LCD_Print("I'm Task 2");
    1da0:	81 e7       	ldi	r24, 0x71	; 113
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	0e 94 c1 01 	call	0x382	; 0x382 <LCD_Print>
			xSemaphoreGive(LCD_Semp);
    1da8:	20 e0       	ldi	r18, 0x00	; 0
    1daa:	40 e0       	ldi	r20, 0x00	; 0
    1dac:	50 e0       	ldi	r21, 0x00	; 0
    1dae:	60 e0       	ldi	r22, 0x00	; 0
    1db0:	70 e0       	ldi	r23, 0x00	; 0
    1db2:	80 91 a0 07 	lds	r24, 0x07A0	; 0x8007a0 <LCD_Semp>
    1db6:	90 91 a1 07 	lds	r25, 0x07A1	; 0x8007a1 <LCD_Semp+0x1>
    1dba:	0e 94 da 07 	call	0xfb4	; 0xfb4 <xQueueGenericSend>
			vTaskDelay(1000);
    1dbe:	88 ee       	ldi	r24, 0xE8	; 232
    1dc0:	93 e0       	ldi	r25, 0x03	; 3
    1dc2:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <vTaskDelay>
    1dc6:	e2 cf       	rjmp	.-60     	; 0x1d8c <LCD_2>

00001dc8 <RTOS_test>:
void RTOS_test()
{
	//DIO_SetPinDirection(PORTA,Pin0,Output);
	//DIO_SetPinDirection(PORTA,Pin1,Output);
	//DIO_SetPinDirection(PORTA,Pin2,Output);
	LCD_Init(PORTA,PORTA,Pin0,Pin1,Pin2,Pin3,Pin4,Pin5);
    1dc8:	6b b3       	in	r22, 0x1b	; 27
    1dca:	8b b3       	in	r24, 0x1b	; 27
    1dcc:	0f 2e       	mov	r0, r31
    1dce:	f5 e0       	ldi	r31, 0x05	; 5
    1dd0:	af 2e       	mov	r10, r31
    1dd2:	f0 2d       	mov	r31, r0
    1dd4:	68 94       	set
    1dd6:	cc 24       	eor	r12, r12
    1dd8:	c2 f8       	bld	r12, 2
    1dda:	0f 2e       	mov	r0, r31
    1ddc:	f3 e0       	ldi	r31, 0x03	; 3
    1dde:	ef 2e       	mov	r14, r31
    1de0:	f0 2d       	mov	r31, r0
    1de2:	02 e0       	ldi	r16, 0x02	; 2
    1de4:	21 e0       	ldi	r18, 0x01	; 1
    1de6:	40 e0       	ldi	r20, 0x00	; 0
    1de8:	0e 94 4f 01 	call	0x29e	; 0x29e <LCD_Init>
	/*create tasks*/
	//xTaskCreate(&Redtask,NULL,200,NULL,Red_Task_Priority,NULL);
	//xTaskCreate(&Greentask,NULL,200,NULL,Green_Task_Priority,NULL);
	//xTaskCreate(&Bluetask,NULL,200,NULL,Blue_Task_Priority,NULL);
	xTaskCreate(&LCD_1,NULL,200,NULL,2,NULL);
    1dec:	e1 2c       	mov	r14, r1
    1dee:	f1 2c       	mov	r15, r1
    1df0:	20 e0       	ldi	r18, 0x00	; 0
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	48 ec       	ldi	r20, 0xC8	; 200
    1df6:	50 e0       	ldi	r21, 0x00	; 0
    1df8:	60 e0       	ldi	r22, 0x00	; 0
    1dfa:	70 e0       	ldi	r23, 0x00	; 0
    1dfc:	88 ea       	ldi	r24, 0xA8	; 168
    1dfe:	9e e0       	ldi	r25, 0x0E	; 14
    1e00:	0e 94 b9 0a 	call	0x1572	; 0x1572 <xTaskCreate>
	xTaskCreate(&LCD_2,NULL,200,NULL,2,NULL);
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	48 ec       	ldi	r20, 0xC8	; 200
    1e0a:	50 e0       	ldi	r21, 0x00	; 0
    1e0c:	60 e0       	ldi	r22, 0x00	; 0
    1e0e:	70 e0       	ldi	r23, 0x00	; 0
    1e10:	86 ec       	ldi	r24, 0xC6	; 198
    1e12:	9e e0       	ldi	r25, 0x0E	; 14
    1e14:	0e 94 b9 0a 	call	0x1572	; 0x1572 <xTaskCreate>
	/*create Semaphore*/
	vSemaphoreCreateBinary(LCD_Semp);
    1e18:	43 e0       	ldi	r20, 0x03	; 3
    1e1a:	60 e0       	ldi	r22, 0x00	; 0
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	0e 94 99 07 	call	0xf32	; 0xf32 <xQueueGenericCreate>
    1e22:	90 93 a1 07 	sts	0x07A1, r25	; 0x8007a1 <LCD_Semp+0x1>
    1e26:	80 93 a0 07 	sts	0x07A0, r24	; 0x8007a0 <LCD_Semp>
    1e2a:	00 97       	sbiw	r24, 0x00	; 0
    1e2c:	39 f0       	breq	.+14     	; 0x1e3c <RTOS_test+0x74>
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	40 e0       	ldi	r20, 0x00	; 0
    1e32:	50 e0       	ldi	r21, 0x00	; 0
    1e34:	60 e0       	ldi	r22, 0x00	; 0
    1e36:	70 e0       	ldi	r23, 0x00	; 0
    1e38:	0e 94 da 07 	call	0xfb4	; 0xfb4 <xQueueGenericSend>
	//LCD_Semp=xSemaphoreCreateCounting(1,1);
	/*Start Scheduler*/
	vTaskStartScheduler();
    1e3c:	0e 94 0d 0b 	call	0x161a	; 0x161a <vTaskStartScheduler>
    1e40:	ff cf       	rjmp	.-2      	; 0x1e40 <RTOS_test+0x78>

00001e42 <__udivmodhi4>:
    1e42:	aa 1b       	sub	r26, r26
    1e44:	bb 1b       	sub	r27, r27
    1e46:	51 e1       	ldi	r21, 0x11	; 17
    1e48:	07 c0       	rjmp	.+14     	; 0x1e58 <__udivmodhi4_ep>

00001e4a <__udivmodhi4_loop>:
    1e4a:	aa 1f       	adc	r26, r26
    1e4c:	bb 1f       	adc	r27, r27
    1e4e:	a6 17       	cp	r26, r22
    1e50:	b7 07       	cpc	r27, r23
    1e52:	10 f0       	brcs	.+4      	; 0x1e58 <__udivmodhi4_ep>
    1e54:	a6 1b       	sub	r26, r22
    1e56:	b7 0b       	sbc	r27, r23

00001e58 <__udivmodhi4_ep>:
    1e58:	88 1f       	adc	r24, r24
    1e5a:	99 1f       	adc	r25, r25
    1e5c:	5a 95       	dec	r21
    1e5e:	a9 f7       	brne	.-22     	; 0x1e4a <__udivmodhi4_loop>
    1e60:	80 95       	com	r24
    1e62:	90 95       	com	r25
    1e64:	bc 01       	movw	r22, r24
    1e66:	cd 01       	movw	r24, r26
    1e68:	08 95       	ret

00001e6a <memcpy>:
    1e6a:	fb 01       	movw	r30, r22
    1e6c:	dc 01       	movw	r26, r24
    1e6e:	02 c0       	rjmp	.+4      	; 0x1e74 <memcpy+0xa>
    1e70:	01 90       	ld	r0, Z+
    1e72:	0d 92       	st	X+, r0
    1e74:	41 50       	subi	r20, 0x01	; 1
    1e76:	50 40       	sbci	r21, 0x00	; 0
    1e78:	d8 f7       	brcc	.-10     	; 0x1e70 <memcpy+0x6>
    1e7a:	08 95       	ret

00001e7c <_exit>:
    1e7c:	f8 94       	cli

00001e7e <__stop_program>:
    1e7e:	ff cf       	rjmp	.-2      	; 0x1e7e <__stop_program>
